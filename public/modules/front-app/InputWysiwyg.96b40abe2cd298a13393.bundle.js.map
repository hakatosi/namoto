{"version":3,"sources":["webpack:///./resources/modules/editor/src/js/classes/AltrpModel.js","webpack:///./resources/modules/editor/src/js/components/ckeditor/Plugins/UploadAdapterPlugin.js","webpack:///./resources/modules/editor/src/js/components/ckeditor/CKeditor.js","webpack:///./resources/modules/editor/src/js/components/widgets/InputWysiwygWidget.js"],"names":["AltrpModel","data","this","cloneDeep","clone","isEmpty","name","defaultValue","get","has","value","getData","set","unset","window","UploadAdapter","props","loader","resource","Resource","route","Promise","resolve","reject","file","then","result","postFiles","response","default","url","UploadAdapterPlugin","editor","plugins","createUploadAdapter","defaultToolbar","body","EditorFrame","contentWindow","document","config","extraPlugins","toolbar","textWidget","CKEditor","InlineEditor","disabled","readOnly","text","onReady","console","log","isEnabled","onChange","event","changeText","onBlur","Component","moment","altrpHelpers","globalDefaults","push","AltrpFieldContainer","styled","div","settings","content_label_position_type","InputWysiwygWidget","timeInput","handleEnter","e","keyCode","preventDefault","inputs","Array","from","querySelectorAll","index","indexOf","target","undefined","focus","element","getSettings","create_allowed","create_label","create_url","createItem","debounceDispatch","_","debounce","dispatchFieldValueToStore","onFocus","focus_actions","isEditor","actionsManager","callAllWidgetActions","getIdForAction","userInput","formId","getFormId","fieldName","getFieldId","replaceContentWithData","isObject","appStore","dispatch","changeFormFieldValue","change_actions","inputValue","create_data","select2_multiple","currentModel","getCurrentModel","parseParamsFromString","parseURLTemplate","setState","state","isDisabled","post","res","success","newOption","label","options","unshift","selectStateManager","menuIsOpen","error","component","elementDecorator","bind","getContent","valueMustArray","isArray","parseOptionsFromSettings","paramsForUpdate","altrpSelectRef","React","createRef","prevProps","prevState","getProperty","contentLoaded","currentDataStorage","content_options","model_for_options","isEqual","dynamic","formsStore","updateOptions","updateValue","content_calculation","altrpforms","prevContext","altrpdata","altrpmodel","altrpuser","currentUser","altrppagestate","altrpPageState","altrpresponses","altrpmeta","altrpMeta","context","currentDataStorageLoaded","changedField","altrpstorage","getDataFromLocalStorage","replace","eval","message","getId","path","formData","JSON","stringify","getRoute","getQueried","filters","getAll","valueToDispatch","change_change_end","change_change_end_delay","clearTimeout","setTimeout","optionsDynamicSetting","getDynamicSetting","convertData","sortBy","o","toString","label_icon","input","classLabel","styleLabel","getResponsiveSetting","marginBottom","label_style_spacing","size","unit","marginTop","marginRight","position","zIndex","content_label","className","style","content_required","assetType","renderAssetIcon","content_autocomplete","renderWysiwyg","getName"],"mappings":"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","file":"InputWysiwyg.96b40abe2cd298a13393.bundle.js","sourcesContent":["/**\r\n * Имеет интерфейс для доступы к свойствам data (любой вложенности)\r\n * @class AltrpModel\r\n */\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport get from 'lodash.get';\r\nimport set from 'lodash.set';\r\nimport has from 'lodash.has';\r\nimport unset from 'lodash.unset';\r\nimport isEmpty from 'lodash.isempty';\r\n// import {cloneDeep, get, set, has, unset, isString, isEmpty} from \"lodash\";\r\n\r\nclass AltrpModel {\r\n  constructor(data = {}) {\r\n    this.data = cloneDeep(data);\r\n  }\r\n\r\n  /**\r\n   * Возваращает объект данных\r\n   * @params {boolean} clone - клонировать или ссылку на данные\r\n   * @return {{}}\r\n   */\r\n  getData(clone = true) {\r\n    if(clone){\r\n      return cloneDeep(this.data);\r\n    }\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Пустой ли объект\r\n   */\r\n  isEmpty(){\r\n    return isEmpty(this.data);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  getProperty(name, defaultValue = '') {\r\n    return get(this.data, name, defaultValue);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {*}\r\n   */\r\n  hasProperty(name, defaultValue = '') {\r\n    return has(this.data, name);\r\n  }\r\n  /**\r\n   * Возврашает значение свойства name\r\n   * @params {string} name\r\n   * @params {*} defaultValue\r\n   * @return {{}}\r\n   */\r\n  setProperty(name, value = '') {\r\n    if(value instanceof AltrpModel){\r\n      value = value.getData(false);\r\n    }\r\n    return set(this.data, name, value);\r\n  }\r\n  /**\r\n   * Удаляет свойства name\r\n   * @params {string} name\r\n   * @return {*}\r\n   */\r\n  unsetProperty(name) {\r\n    return unset(this.data, name);\r\n  }\r\n}\r\nwindow.AltrpModel = AltrpModel;\r\nexport default AltrpModel\r\n","import Resource from \"../../../classes/Resource\";\r\n\r\nclass UploadAdapter {\r\n  constructor(props) {\r\n    this.loader = props;\r\n    this.resource = new Resource({ route: \"/admin/ajax/media\" });\r\n  }\r\n\r\n  upload() {\r\n    return new Promise((resolve, reject) => {\r\n      this.loader.file.then(result => {\r\n        this.resource.postFiles([result]).then(response => {\r\n          resolve({\r\n            default: response[0].url\r\n          });\r\n        });\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * @param editor\r\n */\r\nexport default function UploadAdapterPlugin(editor) {\r\n  editor.plugins.get(\"FileRepository\").createUploadAdapter = loader => {\r\n    return new UploadAdapter(loader);\r\n  };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\r\nimport InlineEditor from \"@ckeditor/ckeditor5-build-inline\";\r\nimport UploadAdapterPlugin from \"./Plugins/UploadAdapterPlugin\";\r\n\r\nconst defaultToolbar = [\r\n  \"heading\",\r\n  \"undo\",\r\n  \"redo\",\r\n  \"bold\",\r\n  \"italic\",\r\n  \"blockQuote\",\r\n  \"indent\",\r\n  \"outdent\",\r\n  \"link\",\r\n  \"numberedList\",\r\n  \"bulletedList\",\r\n  \"imageTextAlternative\",\r\n  \"imageUpload\",\r\n  \"mediaEmbed\",\r\n  \"insertTable\",\r\n  \"tableColumn\",\r\n  \"tableRow\",\r\n  \"mergeTableCells\"\r\n];\r\n\r\nclass CKeditor extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.body = window.EditorFrame ? window.EditorFrame.contentWindow.document.body : document.body;\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    const config = {\r\n      extraPlugins: [UploadAdapterPlugin],\r\n      body: this.body,\r\n      toolbar: defaultToolbar\r\n    };\r\n\r\n    if (this.props.textWidget) {\r\n      return (\r\n        <>\r\n          <CKEditor\r\n            config={config}\r\n            body={this.body}\r\n            editor={InlineEditor}\r\n            disabled={!this.props.readOnly}\r\n            data={this.props.text || \"Type text here\"}\r\n            onReady={editor => {\r\n              // You can store the \"editor\" and use when it is needed.\r\n              console.log(\"Editor is ready to use!\", editor);\r\n              editor.plugins.get( 'TextTransformation' ).isEnabled = false;\r\n            }}\r\n            onChange={(event, editor) =>\r\n              this.props.changeText(editor.getData())\r\n            }\r\n          />\r\n        </>\r\n      );\r\n    }\r\n    return (\r\n      <CKEditor\r\n        config={config}\r\n        body={this.body}\r\n        editor={InlineEditor}\r\n        data={this.props.text || \"Type text here\"}\r\n        disabled={this.props.readOnly}\r\n        onReady={editor => {\r\n          console.log(\"Editor is ready to use!\", editor);\r\n          editor.plugins.get( 'TextTransformation' ).isEnabled = false;\r\n\r\n        }}\r\n        onChange={(event, editor) => this.props.onChange(event, editor)}\r\n        onBlur={(event, editor) => this.props.onBlur(event, editor)}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default CKeditor;\r\n","import {\r\n  convertData,\r\n  isEditor,\r\n  parseOptionsFromSettings,\r\n  parseParamsFromString,\r\n  parseURLTemplate,\r\n  replaceContentWithData,\r\n  renderAssetIcon,\r\n  getDataFromLocalStorage\r\n} from \"../../../../../front-app/src/js/helpers\";\r\nimport Resource from \"../../classes/Resource\";\r\nimport { changeFormFieldValue } from \"../../../../../front-app/src/js/store/forms-data-storage/actions\";\r\nimport AltrpModel from \"../../classes/AltrpModel\";\r\nimport CKeditor from \"../ckeditor/CKeditor\";\r\n\r\nconst { moment } = window.altrpHelpers;\r\n(window.globalDefaults = window.globalDefaults || []).push(`\r\n /*здесь css стилей по умолчанию с селекторами*/\r\n`)\r\nconst AltrpFieldContainer = styled.div`\r\n  ${({ settings: { content_label_position_type } }) => {\r\n    switch (content_label_position_type) {\r\n      case \"left\": {\r\n        return \"display: flex\";\r\n      }\r\n      case \"right\": {\r\n        return \"display:flex;flex-direction:row-reverse;justify-content:flex-end;\";\r\n      }\r\n    }\r\n    return \"\";\r\n  }}\r\n`;\r\n\r\nclass InputWysiwygWidget extends Component {\r\n  timeInput = null;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    props.element.component = this;\r\n    if (window.elementDecorator) {\r\n      window.elementDecorator(this);\r\n    }\r\n    this.onChange = this.onChange.bind(this);\r\n    this.debounceDispatch = this.debounceDispatch.bind(this);\r\n\r\n    this.defaultValue =\r\n      this.getContent(\"content_default_value\") ||\r\n      (this.valueMustArray() ? [] : \"\");\r\n    if (this.valueMustArray() && !_.isArray(this.defaultValue)) {\r\n      this.defaultValue = [];\r\n    }\r\n    this.state = {\r\n      settings: { ...props.element.getSettings() },\r\n      value: this.defaultValue,\r\n      options: parseOptionsFromSettings(\r\n        props.element.getSettings(\"content_options\")\r\n      ),\r\n      paramsForUpdate: null\r\n    };\r\n    this.altrpSelectRef = React.createRef();\r\n    if (this.getContent(\"content_default_value\")) {\r\n      this.dispatchFieldValueToStore(this.getContent(\"content_default_value\"));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * В некоторых случаях значение поля должно быть массивом\r\n   * @return {boolean}\r\n   */\r\n  valueMustArray() {\r\n    return false;\r\n  }\r\n  /**\r\n   * Чистит значение\r\n   */\r\n  clearValue() {\r\n    let value = \"\";\r\n    this.onChange(value);\r\n    this.dispatchFieldValueToStore(value, true);\r\n  }\r\n\r\n  /**\r\n   * Обработка нажатия клавиши\r\n   * @param {{}} e\r\n   */\r\n  handleEnter = e => {\r\n    if (e.keyCode === 13) {\r\n      e.preventDefault();\r\n      const inputs = Array.from(document.querySelectorAll(\"input,select\"));\r\n      const index = inputs.indexOf(e.target);\r\n      if (index === undefined) return;\r\n      inputs[index + 1] && inputs[index + 1].focus();\r\n      const {\r\n        create_allowed,\r\n        create_label,\r\n        create_url\r\n      } = this.props.element.getSettings();\r\n      if (create_allowed && create_label && create_url) {\r\n        this.createItem(e);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Загрузка виджета\r\n   * @param {{}} prevProps\r\n   * @param {{}} prevState\r\n   */\r\n  async _componentDidMount(prevProps, prevState) {\r\n    if (this.props.element.getSettings(\"content_options\")) {\r\n      let options = parseOptionsFromSettings(\r\n        this.props.element.getSettings(\"content_options\")\r\n      );\r\n\r\n      this.setState(state => ({ ...state, options }));\r\n    }\r\n    let value = this.state.value;\r\n\r\n    /**\r\n     * Если динамическое значение загрузилось,\r\n     * то используем this.getContent для получение этого динамического значения\r\n     * старые динамические данные\r\n     * */\r\n    if (\r\n      _.get(value, \"dynamic\") &&\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n    }\r\n\r\n    /**\r\n     * Если модель обновилась при смене URL\r\n     */\r\n    if (\r\n      prevProps &&\r\n      !prevProps.currentModel.getProperty(\"altrpModelUpdated\") &&\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n      this.setState(\r\n        state => ({ ...state, value, contentLoaded: true }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    if (\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\") &&\r\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\r\n      !this.state.contentLoaded\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n      this.setState(\r\n        state => ({ ...state, value, contentLoaded: true }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    if (this.state.value !== value) {\r\n      this.setState(\r\n        state => ({ ...state, value }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Получить url для запросов\r\n   */\r\n  getRoute() {\r\n    let url = this.props.element.getSettings(\"model_for_options\");\r\n\r\n    if (url.indexOf(\"/\") === -1) {\r\n      return `/ajax/models/${url}_options`;\r\n    }\r\n    if (url.indexOf(\"{{\") !== -1) {\r\n      url = replaceContentWithData(url);\r\n    }\r\n    return url;\r\n  }\r\n  /**\r\n   * Обновление виджета\r\n   */\r\n  async _componentDidUpdate(prevProps, prevState) {\r\n    const { content_options, model_for_options } = this.state.settings;\r\n    if (\r\n      prevProps &&\r\n      !prevProps.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\r\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\")\r\n    ) {\r\n      let value = this.getContent(\r\n        \"content_default_value\",\r\n        this.props.element.getSettings(\"select2_multiple\")\r\n      );\r\n      this.setState(\r\n        state => ({ ...state, value, contentLoaded: true }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n    }\r\n\r\n    /**\r\n     * Если обновилась модель, то пробрасываем в стор новое значение (старый источник диамических данных)\r\n     */\r\n    if (\r\n      !_.isEqual(this.props.currentModel, prevProps.currentModel) &&\r\n      this.state.value &&\r\n      this.state.value.dynamic\r\n    ) {\r\n      this.dispatchFieldValueToStore(this.getContent(\"content_default_value\"));\r\n    }\r\n\r\n    /**\r\n     * Если обновилось хранилище данных формы, currentDataStorage или модель, то получаем новые опции c сервера\r\n     */\r\n    if (\r\n      this.props.formsStore !== prevProps.formsStore ||\r\n      this.props.currentModel !== prevProps.currentModel ||\r\n      this.props.currentDataStorage !== prevProps.currentDataStorage\r\n    ) {\r\n      this.updateOptions();\r\n    }\r\n    if (content_options && !model_for_options) {\r\n      let options = parseOptionsFromSettings(content_options);\r\n      if (!_.isEqual(options, this.state.options)) {\r\n        this.setState(state => ({ ...state, options }));\r\n      }\r\n    }\r\n    this.updateValue(prevProps);\r\n  }\r\n\r\n  /**\r\n   * Обновить значение если нужно\r\n   * @param {{}} prevProps\r\n   */\r\n  updateValue(prevProps) {\r\n    if (isEditor()) {\r\n      return;\r\n    }\r\n    let content_calculation = this.props.element.getSettings(\r\n      \"content_calculation\"\r\n    );\r\n    const altrpforms = this.props.formsStore;\r\n    const fieldName = this.props.element.getFieldId();\r\n    const formId = this.props.element.getFormId();\r\n    if (!content_calculation) {\r\n      /**\r\n       * Обновить значение, если formsStore изменилось из другого компонента\r\n       */\r\n      const path = `${formId}.${fieldName}`;\r\n      if (\r\n        this.props.formsStore !== prevProps.formsStore &&\r\n        _.get(altrpforms, path) !== this.state.value\r\n      ) {\r\n        this.setState(state => ({\r\n          ...state,\r\n          value: _.get(altrpforms, path)\r\n        }));\r\n      }\r\n      return;\r\n    }\r\n\r\n    const prevContext = {};\r\n\r\n    const altrpdata = this.props.currentDataStorage.getData();\r\n    const altrpmodel = this.props.currentModel.getData();\r\n    const altrpuser = this.props.currentUser.getData();\r\n    const altrppagestate = this.props.altrpPageState.getData();\r\n    const altrpresponses = this.props.altrpresponses.getData();\r\n    const altrpmeta = this.props.altrpMeta.getData();\r\n    const context = this.props.element.getCurrentModel().getData();\r\n    if (content_calculation.indexOf(\"altrpdata\") !== -1) {\r\n      context.altrpdata = altrpdata;\r\n      if (!altrpdata.currentDataStorageLoaded) {\r\n        prevContext.altrpdata = altrpdata;\r\n      } else {\r\n        prevContext.altrpdata = prevProps.currentDataStorage.getData();\r\n      }\r\n    }\r\n    if (content_calculation.indexOf(\"altrpforms\") !== -1) {\r\n      context.altrpforms = altrpforms;\r\n      /**\r\n       * Не производим вычисления, если изменилось текущее поле\r\n       */\r\n      if (`${formId}.${fieldName}` === altrpforms.changedField) {\r\n        prevContext.altrpforms = altrpforms;\r\n      } else {\r\n        prevContext.altrpforms = prevProps.formsStore;\r\n      }\r\n    }\r\n    if (content_calculation.indexOf(\"altrpmodel\") !== -1) {\r\n      context.altrpmodel = altrpmodel;\r\n      prevContext.altrpmodel = prevProps.currentModel.getData();\r\n    }\r\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\r\n      context.altrpuser = altrpuser;\r\n      prevContext.altrpuser = prevProps.currentUser.getData();\r\n    }\r\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\r\n      context.altrpuser = altrpuser;\r\n      prevContext.altrpuser = prevProps.currentUser.getData();\r\n    }\r\n    if (content_calculation.indexOf(\"altrppagestate\") !== -1) {\r\n      context.altrppagestate = altrppagestate;\r\n      prevContext.altrppagestate = prevProps.altrpPageState.getData();\r\n    }\r\n    if (content_calculation.indexOf(\"altrpmeta\") !== -1) {\r\n      context.altrpmeta = altrpmeta;\r\n      prevContext.altrpmeta = prevProps.altrpMeta.getData();\r\n    }\r\n    if (content_calculation.indexOf(\"altrpresponses\") !== -1) {\r\n      context.altrpresponses = altrpresponses;\r\n      prevContext.altrpresponses = prevProps.altrpresponses.getData();\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpstorage\") !== -1) {\r\n      context.altrpstorage = getDataFromLocalStorage(\"altrpstorage\", {});\r\n    }\r\n\r\n    if (\r\n      _.isEqual(prevProps.currentDataStorage, this.props.currentDataStorage) &&\r\n      _.isEqual(prevProps.currentUser, this.props.currentUser) &&\r\n      _.isEqual(prevProps.formsStore, this.props.formsStore) &&\r\n      _.isEqual(prevProps.altrpPageState, this.props.altrpPageState) &&\r\n      _.isEqual(prevProps.altrpMeta, this.props.altrpMeta) &&\r\n      _.isEqual(prevProps.altrpresponses, this.props.altrpresponses) &&\r\n      _.isEqual(prevProps.currentModel, this.props.currentModel)\r\n    ) {\r\n      return;\r\n    }\r\n    if (\r\n      !_.isEqual(prevProps.formsStore, this.props.formsStore) &&\r\n      `${formId}.${fieldName}` === altrpforms.changedField\r\n    ) {\r\n      return;\r\n    }\r\n    let value = \"\";\r\n    try {\r\n      content_calculation = content_calculation\r\n        .replace(/}}/g, \"')\")\r\n        .replace(/{{/g, \"_.get(context, '\");\r\n      value = eval(content_calculation);\r\n      if (value === this.state.value) {\r\n        return;\r\n      }\r\n      this.setState(\r\n        state => ({ ...state, value }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n    } catch (e) {\r\n      console.error(\r\n        \"Evaluate error in Input \" + e.message,\r\n        this.props.element.getId()\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Обновляет опции для селекта при обновлении данных, полей формы\r\n   */\r\n  async updateOptions() {\r\n    {\r\n      let formId = this.props.element.getFormId();\r\n      let paramsForUpdate = this.props.element.getSettings(\"params_for_update\");\r\n      let formData = _.get(this.props.formsStore, [formId], {});\r\n      paramsForUpdate = parseParamsFromString(\r\n        paramsForUpdate,\r\n        new AltrpModel(formData)\r\n      );\r\n      /**\r\n       * Сохраняем параметры запроса, и если надо обновляем опции\r\n       */\r\n      let options = [...this.state.options];\r\n      if (!_.isEqual(paramsForUpdate, this.state.paramsForUpdate)) {\r\n        if (!_.isEmpty(paramsForUpdate)) {\r\n          if (this.props.element.getSettings(\"params_as_filters\", false)) {\r\n            paramsForUpdate = JSON.stringify(paramsForUpdate);\r\n            options = await new Resource({\r\n              route: this.getRoute()\r\n            }).getQueried({ filters: paramsForUpdate });\r\n          } else {\r\n            options = await new Resource({ route: this.getRoute() }).getQueried(\r\n              paramsForUpdate\r\n            );\r\n          }\r\n          options = !_.isArray(options) ? options.data : options;\r\n          options = _.isArray(options) ? options : [];\r\n        } else if (this.state.paramsForUpdate) {\r\n          options = await new Resource({ route: this.getRoute() }).getAll();\r\n          options = !_.isArray(options) ? options.data : options;\r\n          options = _.isArray(options) ? options : [];\r\n        }\r\n\r\n        this.setState(state => ({\r\n          ...state,\r\n          paramsForUpdate,\r\n          options\r\n        }));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Изменение значения в виджете\r\n   * @param e\r\n   * @param  editor для получения изменений из CKEditor\r\n   */\r\n  onChange(e, editor = null) {\r\n    let value = \"\";\r\n    let valueToDispatch;\r\n    const settings = this.props.element.getSettings();\r\n    if (e && e.target) {\r\n      value = e.target.value;\r\n    }\r\n\r\n    if (e && e.value) {\r\n      value = e.value;\r\n    }\r\n    if (_.get(editor, \"getData\")) {\r\n      value = `<div class=\"ck ck-content\" style=\"width:100%\">${editor.getData()}</div>`;\r\n    }\r\n    if (_.isArray(e)) {\r\n      value = _.cloneDeep(e);\r\n    }\r\n\r\n    if (\r\n      this.props.element.getSettings(\"content_options_nullable\") &&\r\n      e &&\r\n      e.value === \"<null>\"\r\n    ) {\r\n      value = null;\r\n    }\r\n\r\n    this.setState(\r\n      state => ({\r\n        ...state,\r\n        value\r\n      }),\r\n      () => {\r\n        /**\r\n         * Обновляем хранилище только если не текстовое поле\r\n         */\r\n\r\n        const change_actions = this.props.element.getSettings(\"change_actions\");\r\n        const change_change_end = this.props.element.getSettings(\r\n          \"change_change_end\"\r\n        );\r\n        const change_change_end_delay = this.props.element.getSettings(\r\n          \"change_change_end_delay\"\r\n        );\r\n\r\n\r\n        this.dispatchFieldValueToStore(\r\n          valueToDispatch !== undefined ? valueToDispatch : value,\r\n          true\r\n        );\r\n\r\n        if (change_actions && !change_change_end && !isEditor()) {\r\n          this.debounceDispatch(\r\n            valueToDispatch !== undefined ? valueToDispatch : value\r\n          );\r\n        }\r\n        if (change_actions && change_change_end && !isEditor()) {\r\n          this.timeInput && clearTimeout(this.timeInput);\r\n          this.timeInput = setTimeout(() => {\r\n            this.debounceDispatch(\r\n              valueToDispatch !== undefined ? valueToDispatch : value\r\n            );\r\n          }, change_change_end_delay);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  debounceDispatch = _.debounce(\r\n    value => this.dispatchFieldValueToStore(value, true),\r\n    150\r\n  );\r\n\r\n  /**\r\n   * получить опции\r\n   */\r\n  getOptions() {\r\n    let options = [...this.state.options];\r\n    const optionsDynamicSetting = this.props.element.getDynamicSetting(\r\n      \"content_options\"\r\n    );\r\n    if (optionsDynamicSetting) {\r\n      options = convertData(optionsDynamicSetting, options);\r\n    }\r\n    if (!this.props.element.getSettings(\"sort_default\")) {\r\n      options = _.sortBy(options, o => o && (o.label ? o.label.toString() : o));\r\n    }\r\n    return options;\r\n  }\r\n\r\n  /**\r\n   * Для действие по фокусу\r\n   * @param e\r\n   * @return {Promise<void>}\r\n   */\r\n\r\n  onFocus = async e => {\r\n    const focus_actions = this.props.element.getSettings(\"focus_actions\");\r\n\r\n    if (focus_actions && !isEditor()) {\r\n      const actionsManager = (\r\n        await import(\r\n          /* webpackChunkName: 'ActionsManager' */\r\n          \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\r\n        )\r\n      ).default;\r\n      await actionsManager.callAllWidgetActions(\r\n        this.props.element.getIdForAction(),\r\n        \"focus\",\r\n        focus_actions,\r\n        this.props.element\r\n      );\r\n    }\r\n  };\r\n  /**\r\n   * Потеря фокуса для оптимизации\r\n   * @param  e\r\n   * @param  editor для получения изменений из CKEditor\r\n   */\r\n  onBlur = async (e, editor = null) => {\r\n    if (_.get(editor, \"getData\")) {\r\n      this.dispatchFieldValueToStore(editor.getData(), true);\r\n    }\r\n    if (this.props.element.getSettings(\"actions\", []) && !isEditor()) {\r\n      const actionsManager = (\r\n        await import(\r\n          /* webpackChunkName: 'ActionsManager' */\r\n          \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\r\n        )\r\n      ).default;\r\n      await actionsManager.callAllWidgetActions(\r\n        this.props.element.getIdForAction(),\r\n        \"blur\",\r\n        this.props.element.getSettings(\"actions\", []),\r\n        this.props.element\r\n      );\r\n    }\r\n  };\r\n  /**\r\n   * Передадим значение в хранилище формы\r\n   * @param {*} value\r\n   * @param {boolean} userInput true - имзенилось пользователем\r\n   */\r\n  dispatchFieldValueToStore = async (value, userInput = false) => {\r\n    let formId = this.props.element.getFormId();\r\n    let fieldName = this.props.element.getFieldId();\r\n    if (fieldName.indexOf(\"{{\") !== -1) {\r\n      fieldName = replaceContentWithData(fieldName);\r\n    }\r\n    if (_.isObject(this.props.appStore) && fieldName && formId) {\r\n      this.props.appStore.dispatch(\r\n        changeFormFieldValue(fieldName, value, formId, userInput)\r\n      );\r\n      if (userInput) {\r\n        const change_actions = this.props.element.getSettings(\"change_actions\");\r\n\r\n        if (change_actions && !isEditor()) {\r\n          const actionsManager = (\r\n            await import(\r\n              /* webpackChunkName: 'ActionsManager' */\r\n              \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\r\n            )\r\n          ).default;\r\n          await actionsManager.callAllWidgetActions(\r\n            this.props.element.getIdForAction(),\r\n            \"change\",\r\n            change_actions,\r\n            this.props.element\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Обработка добавления опции по ajax\r\n   * @param {SyntheticKeyboardEvent} e\r\n   */\r\n  createItem = async e => {\r\n    const keyCode = e.keyCode;\r\n    const { value: inputValue } = e.target;\r\n    if (keyCode !== 13 || !inputValue) {\r\n      return;\r\n    }\r\n    const {\r\n      create_url,\r\n      create_label,\r\n      create_data,\r\n      select2_multiple\r\n    } = this.props.element.getSettings();\r\n    if (!create_label && !create_url) {\r\n      return;\r\n    }\r\n    const currentModel = this.props.element.getCurrentModel();\r\n    let data = parseParamsFromString(create_data, currentModel, true);\r\n    data[create_label] = inputValue;\r\n    let url = parseURLTemplate(create_url, currentModel.getData());\r\n    this.setState(state => ({ ...state, isDisabled: true }));\r\n    try {\r\n      const resource = new Resource({\r\n        route: url\r\n      });\r\n      let res = await resource.post(data);\r\n      if (res.success && _.get(res, \"data.id\")) {\r\n        let newOption = {\r\n          label: inputValue,\r\n          value: _.get(res, \"data.id\")\r\n        };\r\n        this.setState(\r\n          state => ({ ...state, isDisabled: false }),\r\n          () => {\r\n            let options = [...this.state.options];\r\n            options.unshift(newOption);\r\n            let value = this.state.value;\r\n            if (select2_multiple) {\r\n              value = value ? [...value] : [];\r\n              value.push(_.get(res, \"data.id\"));\r\n            } else {\r\n              value = _.get(res, \"data.id\");\r\n            }\r\n            this.setState(\r\n              state => ({ ...state, options, value }),\r\n              () => {\r\n                const selectStateManager = _.get(\r\n                  this,\r\n                  \"altrpSelectRef.current.selectRef.current\"\r\n                );\r\n                if (selectStateManager) {\r\n                  selectStateManager.setState({\r\n                    menuIsOpen: false,\r\n                    inputValue: \"\"\r\n                  });\r\n                }\r\n              }\r\n            );\r\n          }\r\n        );\r\n      }\r\n      this.setState(state => ({ ...state, isDisabled: false }));\r\n    } catch (error) {\r\n      console.error(error);\r\n      this.setState(state => ({ ...state, isDisabled: false }));\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Взовращает имя для атрибута name\r\n   * @return {string}\r\n   */\r\n  getName() {\r\n    return `${this.props.element.getFormId()}[${this.props.element.getFieldId()}]`;\r\n  }\r\n\r\n  render() {\r\n    let label = null;\r\n    const settings = this.props.element.getSettings();\r\n    const {\r\n      select2_multiple: isMultiple,\r\n      label_icon\r\n    } = settings;\r\n\r\n    let value = this.state.value;\r\n\r\n    if (\r\n      _.get(value, \"dynamic\") &&\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n    }\r\n    /**\r\n     * Пока динамический контент загружается (Еесли это динамический контент),\r\n     * нужно вывести пустую строку\r\n     */\r\n    if (value && value.dynamic) {\r\n      value = \"\";\r\n    }\r\n    let classLabel = \"\";\r\n    let styleLabel = {};\r\n    const content_label_position_type = this.props.element.getResponsiveSetting(\r\n      \"content_label_position_type\"\r\n    );\r\n    switch (content_label_position_type) {\r\n      case \"top\":\r\n        styleLabel = {\r\n          marginBottom: this.state.settings.label_style_spacing\r\n            ? this.state.settings.label_style_spacing.size +\r\n            this.state.settings.label_style_spacing.unit\r\n            : 2 + \"px\"\r\n        };\r\n        classLabel = \"\";\r\n        break;\r\n      case \"bottom\":\r\n        styleLabel = {\r\n          marginTop: this.state.settings.label_style_spacing\r\n            ? this.state.settings.label_style_spacing.size +\r\n            this.state.settings.label_style_spacing.unit\r\n            : 2 + \"px\"\r\n        };\r\n        classLabel = \"\";\r\n        break;\r\n      case \"left\":\r\n        styleLabel = {\r\n          marginRight: this.state.settings.label_style_spacing\r\n            ? this.state.settings.label_style_spacing.size +\r\n            this.state.settings.label_style_spacing.unit\r\n            : 2 + \"px\"\r\n        };\r\n        classLabel = \"altrp-field-label-container-left\";\r\n\r\n        break;\r\n      case \"absolute\":\r\n        styleLabel = {\r\n          position: \"absolute\",\r\n          zIndex: 2\r\n        };\r\n        classLabel = \"\";\r\n        break;\r\n    }\r\n\r\n    if (this.state.settings.content_label) {\r\n      label = (\r\n        <div\r\n          className={\"altrp-field-label-container \" + classLabel}\r\n          style={styleLabel}\r\n        >\r\n          <label\r\n            className={`altrp-field-label ${this.state.settings.content_required\r\n              ? \"altrp-field-label--required\"\r\n              : \"\"\r\n              }`}\r\n          >\r\n            {this.state.settings.content_label}\r\n          </label>\r\n          {label_icon && label_icon.assetType && (\r\n            <span className=\"altrp-label-icon\">\r\n              {renderAssetIcon(label_icon)}\r\n            </span>\r\n          )}\r\n        </div>\r\n      );\r\n    } else {\r\n      label = null;\r\n    }\r\n\r\n    let autocomplete = \"off\";\r\n    if (this.state.settings.content_autocomplete) {\r\n      autocomplete = \"on\";\r\n    } else {\r\n      autocomplete = \"off\";\r\n    }\r\n\r\n    let input = null;\r\n    input = this.renderWysiwyg();\r\n    return (\r\n      <AltrpFieldContainer\r\n        settings={settings}\r\n        className={\"altrp-field-container \"}\r\n      >\r\n        {content_label_position_type === \"top\" ? label : \"\"}\r\n        {content_label_position_type === \"left\" ? label : \"\"}\r\n        {content_label_position_type === \"right\" ? label : \"\"}\r\n        {content_label_position_type === \"absolute\" ? label : \"\"}\r\n        {/* .altrp-field-label-container */}\r\n        {input}\r\n        {content_label_position_type === \"bottom\" ? label : \"\"}\r\n      </AltrpFieldContainer>\r\n    );\r\n  }\r\n\r\n  renderWysiwyg() {\r\n    return (\r\n      <CKeditor\r\n        onChange={this.onChange}\r\n        onBlur={this.onBlur}\r\n        changeText={this.dispatchFieldValueToStore}\r\n        text={this.getContent(\"content_default_value\")}\r\n        name={this.getName()}\r\n        readOnly={this.getContent(\"read_only\")}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputWysiwygWidget;\r\n"],"sourceRoot":""}