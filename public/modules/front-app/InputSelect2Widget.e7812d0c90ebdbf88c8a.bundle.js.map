{"version":3,"sources":["webpack:///./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack:///./resources/modules/admin/src/components/altrp-select/AltrpSelect.js","webpack:///./resources/modules/editor/src/js/components/widgets/InputSelect2Widget.js","webpack:///./node_modules/react-select/async/dist/react-select.browser.esm.js"],"names":["_setPrototypeOf","o","p","Object","setPrototypeOf","__proto__","renderScrollbar","props","autoHeight","children","AltrpSelect","loadOptions","searchString","callback","options","optionsResource","search","setState","state","optionsRoute","Resource","route","selectRef","React","customStyles","control","base","boxShadow","borderColor","isFocused","menuPortal","zIndex","selectProps","onChange","this","placeholder","noOptionsMessage","styles","menuPortalTarget","document","body","menuPlacement","menuPosition","onKeyDown","components","MenusList","captureMenuScroll","isDisabled","ref","_","assign","isArray","value","map","item","_i","label","isString","isNumber","isObject","forEach","option","find","Component","moment","window","altrpHelpers","globalDefaults","push","AltrpFieldContainer","styled","div","settings","content_label_position_type","InputSelect2Widget","timeInput","handleEnter","e","keyCode","preventDefault","inputs","Array","from","querySelectorAll","index","indexOf","target","undefined","focus","element","getSettings","create_allowed","create_label","create_url","createItem","debounceDispatch","debounce","dispatchFieldValueToStore","onFocus","focus_actions","isEditor","actionsManager","default","callAllWidgetActions","getIdForAction","onBlur","editor","get","getData","userInput","formId","getFormId","fieldName","getFieldId","replaceContentWithData","appStore","dispatch","changeFormFieldValue","change_actions","inputValue","create_data","select2_multiple","currentModel","getCurrentModel","data","parseParamsFromString","url","parseURLTemplate","resource","post","res","success","newOption","unshift","selectStateManager","menuIsOpen","console","error","component","elementDecorator","bind","defaultValue","getContent","valueMustArray","parseOptionsFromSettings","paramsForUpdate","altrpSelectRef","createRef","getName","optionsDynamicSetting","getDynamicSetting","convertData","prevProps","prevState","model_for_options","getRoute","getAll","getProperty","contentLoaded","currentDataStorage","content_options","isEqual","dynamic","formsStore","updateOptions","updateValue","content_calculation","altrpforms","prevContext","altrpdata","altrpmodel","altrpuser","currentUser","altrppagestate","altrpPageState","altrpresponses","altrpmeta","altrpMeta","context","currentDataStorageLoaded","changedField","altrpstorage","getDataFromLocalStorage","replace","eval","message","getId","path","formData","AltrpModel","isEmpty","JSON","stringify","getQueried","filters","valueToDispatch","cloneDeep","change_change_end","change_change_end_delay","content_type","clearTimeout","setTimeout","sortBy","toString","content_readonly","label_icon","classLabel","styleLabel","getResponsiveSetting","marginBottom","label_style_spacing","size","unit","marginTop","marginRight","position","content_label","className","style","content_required","assetType","renderAssetIcon","autocomplete","content_autocomplete","input","renderSelect2","isClearable","content_clearable","isDate","timestamp","unix","isValid","format","log","type","name","readOnly","autoComplete","content_placeholder","position_css_classes","id","position_css_id","onClick","content_options_nullable","nulled_option_title","getOptions","v","_v","valueItem","union","select2Props","classNamePrefix","isOptionSelected","includes","isMulti","SelectComponent","_class","_temp","SelectState","m","S","Async","_Component","Derived","hasNativeReflectConstruct","_super","Reflect","construct","sham","Proxy","Date","prototype","call","_isNativeReflectConstruct","result","Super","NewTarget","constructor","arguments","apply","_this","select","lastRequest","mounted","optionsCache","handleInputChange","newValue","actionMeta","_this$props","cacheOptions","onInputChange","loadedInputValue","loadedOptions","isLoading","passEmptyOptions","request","defaultOptions","key","_this2","nextProps","blur","loader","then","_this3","_this$props2","isLoadingProp","_this$state","_ref","defaultProps","filterOption"],"mappings":"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","file":"InputSelect2Widget.e7812d0c90ebdbf88c8a.bundle.js","sourcesContent":["export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import React, {Component} from \"react\";\r\nimport AsyncSelect from \"react-select/async\";\r\nimport Resource from \"../../../../editor/src/js/classes/Resource\";\r\nimport Select from \"react-select\";\r\nimport { Scrollbars } from \"react-custom-scrollbars\";\r\nimport {parseParamsFromString, parseURLTemplate} from \"../../../../front-app/src/js/helpers\";\r\n\r\nexport const renderScrollbar = (props) => {\r\n  return <Scrollbars autoHeight >{props.children}</Scrollbars>;\r\n};\r\n\r\nclass AltrpSelect extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      options: props.options || [],\r\n    };\r\n    if(props.optionsRoute){\r\n      this.optionsResource = new Resource({route: props.optionsRoute});\r\n    }\r\n    this.selectRef = React.createRef();\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  async componentDidMount(){\r\n\r\n  }\r\n  /**\r\n   * изменение значения\r\n   */\r\n  onChange(){\r\n\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  loadOptions = async (searchString, callback)=>{\r\n    let options = [];\r\n    if(this.optionsResource){\r\n      options = await this.optionsResource.search(searchString);\r\n    }\r\n    this.setState(state=>({\r\n      ...state,\r\n      options\r\n    }));\r\n    return callback(options);\r\n  };\r\n\r\n  render(){\r\n    const customStyles = {\r\n      control: (base, state) => ({\r\n        ...base,\r\n        boxShadow: \"none\",\r\n        borderColor: state.isFocused ? \"hsl(0,0%,80%)\" : \"hsl(0,0%,80%)\",\r\n        \"&:hover\": {\r\n          borderColor: \"hsl(0,0%,80%)\"\r\n        }\r\n      }),\r\n      menuPortal: base => ({ ...base, zIndex: 99999 }),\r\n      // option: (provided, state) => ({\r\n      //   ...provided,\r\n      //   backgroundColor: state.isSelected ?\r\n      //     background.selected.color :\r\n      //     state.isFocused ? background.focused.color : background.normal.color\r\n      // })\r\n    };\r\n\r\n    let selectProps = {\r\n      onChange: this.onChange,\r\n      options: this.state.options || [],\r\n      placeholder: this.props.placeholder,\r\n      loadOptions: this.loadOptions,\r\n      noOptionsMessage: this.props.noOptionsMessage || (() => \"not found\"),\r\n      styles: customStyles,\r\n      menuPortalTarget: document.body,\r\n      menuPlacement: 'auto',\r\n      menuPosition: 'absolute',\r\n      onKeyDown : this.onKeyDown,\r\n      components: { MenusList: renderScrollbar },\r\n      captureMenuScroll: false,\r\n      isDisabled: this.state.isDisabled,\r\n      ref: this.selectRef,\r\n    };\r\n\r\n    _.assign(selectProps, this.props);\r\n\r\n    if(_.isArray(selectProps.value)){\r\n      selectProps.value = selectProps.value.map(item => {\r\n        let _i = {\r\n          label: '',\r\n          value: '',\r\n        };\r\n        if(_.isString(item) || _.isNumber(item)){\r\n          _i.value = item;\r\n          _i.label = item;\r\n        } else if(_.isObject(item)) {\r\n          return item;\r\n        }\r\n        if(_.isArray(selectProps.options)){\r\n          selectProps.options.forEach(option=>{\r\n            if(option.value === _i.value){\r\n              _i = {...option,};\r\n            }\r\n          });\r\n        }\r\n        return _i;\r\n      });\r\n    }\r\n    if(selectProps.value && ! _.isObject(selectProps.value)){\r\n      selectProps.value = selectProps.options.find(o=>{\r\n        return o.value == selectProps.value;\r\n      });\r\n    }\r\n    if( this.optionsResource){\r\n      return <AsyncSelect {...selectProps} />\r\n    } else {\r\n      return <Select {...selectProps} />\r\n    }\r\n  }\r\n}\r\n\r\nexport default AltrpSelect\r\n\r\n\r\n\r\n","import {\r\n  convertData,\r\n  isEditor,\r\n  parseOptionsFromSettings,\r\n  parseParamsFromString,\r\n  parseURLTemplate,\r\n  replaceContentWithData,\r\n  renderAssetIcon,\r\n  getDataFromLocalStorage\r\n} from \"../../../../../front-app/src/js/helpers\";\r\nimport Resource from \"../../classes/Resource\";\r\nimport AltrpSelect from \"../../../../../admin/src/components/altrp-select/AltrpSelect\";\r\nimport { changeFormFieldValue } from \"../../../../../front-app/src/js/store/forms-data-storage/actions\";\r\nimport AltrpModel from \"../../classes/AltrpModel\";\r\nimport AltrpInput from \"../altrp-input/AltrpInput\";\r\nconst { moment } = window.altrpHelpers;\r\n(window.globalDefaults = window.globalDefaults || []).push(`\r\n.altrp-field {\r\n  border-style: solid;\r\n  width: 100%;\r\n}\r\n.altrp-field-file{\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n}\r\n\r\n.altrp-label-icon svg,\r\n.altrp-label-icon img {\r\n  width: 20px;\r\n}\r\n.altrp-label-icon svg{\r\n  height: 20px;\r\n}\r\n.altrp-field-file__field{\r\n  display: none;\r\n}\r\n.altrp-field-file__placeholder{\r\n  display: none;\r\n}\r\n.altrp-field-file_empty .altrp-field-file__placeholder{\r\n  display: block;\r\n  padding: 10px 20px;\r\n  border: none;\r\n  cursor: pointer;\r\n  background-color: rgb(52,59,76);\r\n  color: #fff;\r\n}\r\n.input-clear-btn {\r\n  background: transparent;\r\n  padding: 0;\r\n  position: absolute;\r\n  bottom: calc(50% - 7px);\r\n  right: 15px;\r\n  display: none;\r\n}\r\n.input-clear-btn:hover {\r\n  font-weight: bold;\r\n}\r\n.altrp-field:hover + .input-clear-btn, .input-clear-btn:hover {\r\n  display: block;\r\n}\r\n.altrp-input-wrapper, .altrp-field-select2 {\r\n  position: relative;\r\n  flex-grow: 1;\r\n}\r\n.altrp-field-label--required::after {\r\n  content: \"*\";\r\n  color: red;\r\n  font-size: inherit;\r\n  padding-left: 10px;\r\n}\r\n.altrp-field-label {\r\n  font-size: 16px;\r\n  font-family: \"Open Sans\";\r\n  line-height: 1.5;\r\n  letter-spacing: 0;\r\n}\r\n.altrp-field-select2__single-value, .altrp-field {\r\n  font-size: 16px;\r\n  font-family: \"Open Sans\";\r\n  line-height: 1.5;\r\n  letter-spacing: 0;\r\n}\r\n.altrp-field-select2__control, .altrp-field {\r\n  text-align: left;\r\n  padding-top: 2px;\r\n  padding-right: 2px;\r\n  padding-bottom: 2px;\r\n  padding-left: 2px;\r\n  border-width: 1px;\r\n  border-color: #000;\r\n}\r\n.altrp-field-select2__control:hover{\r\n  border-width: 1px;\r\n  border-color: #000;\r\n}\r\n.altrp-field-container {\r\n  margin: 0;\r\n}\r\n.altrp-field::placeholder, .altrp-field-select2__placeholder {\r\n  font-size: 13px;\r\n  font-family: \"Open Sans\";\r\n  line-height: 1.5;\r\n  letter-spacing: 0;\r\n}\r\n.altrp-image-select {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n}\r\n.altrp-image-select img {\r\n  flex-grow: 1;\r\n  object-fit: contain;\r\n}\r\n.altrp-field {\r\n  overflow: hidden;\r\n  cursor: pointer;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n}\r\n.altrp-field.active {\r\n  border-color: lightcoral;\r\n}\r\n.altrp-field-label {\r\n  text-align: center;\r\n  display: block;\r\n}\r\n.altrp-pagination__select-size .altrp-field-select2__single-value {\r\n  font-size: 14px;\r\n}\r\n.altrp-pagination__select-size .altrp-field-select2__indicator-separator {\r\n  display: none;\r\n}\r\n.altrp-pagination__select-size .altrp-field-select2__indicator {\r\n  align-items: center;\r\n}\r\n.altrp-pagination__select-size .altrp-field-select2__control {\r\n  width: 100px;\r\n  min-height: 32px;\r\n  padding: 0;\r\n  border-radius: 0;\r\n  outline: none;\r\n  border-color: rgb(142,148,170);\r\n  -webkit-box-shadow: none;\r\n  -moz-box-shadow: none;\r\n  box-shadow: none;\r\n}\r\n.altrp-pagination__select-size .altrp-field-select2__control input {\r\n  border: none;\r\n}\r\n.altrp-field-select2 {\r\n  position: relative;\r\n  box-sizing: border-box;\r\n  pointer-events: none;\r\n}\r\n.altrp-field-select2__control {\r\n  webkit-align-items: center;\r\n  -webkit-box-align: center;\r\n  -ms-flex-align: center;\r\n  align-items: center;\r\n  background-color: hsl(0,0%,100%);\r\n  border-color: hsl(0,0%,80%);\r\n  border-style: solid;\r\n  border-width: 1px;\r\n  cursor: default;\r\n  display: -webkit-box;\r\n  display: -webkit-flex;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-flex-wrap: wrap;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap;\r\n  -webkit-box-pack: justify;\r\n  -webkit-justify-content: space-between;\r\n  -ms-flex-pack: justify;\r\n  justify-content: space-between;\r\n  min-height: 38px;\r\n  outline: 0 !important;\r\n  position: relative;\r\n  -webkit-transition: all 100ms;\r\n  transition: all 100ms;\r\n  box-sizing: border-box;\r\n}\r\n.altrp-field-select2__value-container {\r\n  -webkit-align-items: center;\r\n  -webkit-box-align: center;\r\n  -ms-flex-align: center;\r\n  align-items: center;\r\n  display: -webkit-box;\r\n  display: -webkit-flex;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-flex: 1;\r\n  -ms-flex: 1;\r\n  flex: 1;\r\n  -webkit-flex-wrap: wrap;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap;\r\n  padding: 2px 8px;\r\n  -webkit-overflow-scrolling: touch;\r\n  position: relative;\r\n  overflow: hidden;\r\n  box-sizing: border-box;\r\n}\r\n.altrp-field-select2__single-value {\r\n  color: hsl(0,0%,20%);\r\n  margin-left: 2px;\r\n  margin-right: 2px;\r\n  max-width: calc(100% - 8px);\r\n  overflow: hidden;\r\n  position: absolute;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n  top: 50%;\r\n  -webkit-transform: translateY(-50%);\r\n  -ms-transform: translateY(-50%);\r\n  transform: translateY(-50%);\r\n  box-sizing: border-box;\r\n}\r\n.altrp-field-select2__indicators {\r\n  -webkit-align-items: center;\r\n  -webkit-box-align: center;\r\n  -ms-flex-align: center;\r\n  align-items: center;\r\n  -webkit-align-self: stretch;\r\n  -ms-flex-item-align: stretch;\r\n  align-self: stretch;\r\n  display: -webkit-box;\r\n  display: -webkit-flex;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-flex-shrink: 0;\r\n  -ms-flex-negative: 0;\r\n  flex-shrink: 0;\r\n  box-sizing: border-box;\r\n}\r\n.altrp-field-select2__indicator-separator {\r\n  -webkit-align-self: stretch;\r\n  -ms-flex-item-align: stretch;\r\n  align-self: stretch;\r\n  background-color: hsl(0,0%,80%);\r\n  margin-bottom: 8px;\r\n  margin-top: 8px;\r\n  width: 1px;\r\n  box-sizing: border-box;\r\n}\r\n.altrp-field-select2__indicator {\r\n  color: hsl(0,0%,80%);\r\n  display: -webkit-box;\r\n  display: -webkit-flex;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  padding: 8px;\r\n  -webkit-transition: color 150ms;\r\n  transition: color 150ms;\r\n  box-sizing: border-box;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n.tba-placeholder {\r\n  display: flex;\r\n  justify-content: center;\r\n  font-size: 28px;\r\n  font-weight: bold;\r\n}\r\n.altrp-field-subgroup {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n}\r\n.altrp-field-option {\r\n  display: flex;\r\n  padding: 10px;\r\n}\r\n.altrp-field-option__label {\r\n  cursor: pointer;\r\n}\r\ntextarea.altrp-field {\r\n  display: block;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__placeholder {\r\n  white-space: nowrap;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__single-value {\r\n  font-size: 14px;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__indicator-separator {\r\n  display: none;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__indicator {\r\n  align-items: center;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__control {\r\n  width: 100%;\r\n  min-height: 19px;\r\n  padding: 0;\r\n  border-radius: 0;\r\n  outline: none;\r\n  border-color: rgb(142, 148, 170);\r\n  -webkit-box-shadow: none;\r\n  -moz-box-shadow: none;\r\n  box-shadow: none;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__control input {\r\n  border: none;\r\n}\r\n.altrp-table__filter-select .altrp-field-select2__value-container {\r\n  padding-top: 0;\r\n  padding-bottom: 0;\r\n  line-height: 13px;\r\n}\r\n.altrp-field-required {\r\n  color: red;\r\n  font-size: 18px;\r\n  padding-left: 10px;\r\n}\r\n.altrp-field-container-label {\r\n  display: flex;\r\n  flex-direction: row;\r\n}\r\n\r\n.altrp-field-label-container-left {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.altrp-field-label-container {\r\n  display: inline-flex;\r\n  align-items: center;\r\n}\r\n.altrp-field-select2__indicator.altrp-field-select2__dropdown-indicator {\r\n  padding: 0 8px;\r\n  max-height: 14px;\r\n  overflow: hidden;\r\n}\r\n.altrp-field-select2 .altrp-field-select2__value-container {\r\n  padding: 0px 8px;\r\n}\r\n.altrp-field-select2 .css-b8ldur-Input {\r\n  padding-bottom: 0px;\r\n  padding-top: 0px;\r\n  margin: 0 2px;\r\n}\r\n.altrp-field-select2 .altrp-field-select2__control {\r\n  min-height: 14px;\r\n}\r\n`)\r\nconst AltrpFieldContainer = styled.div`\r\n  ${({ settings: { content_label_position_type } }) => {\r\n    switch (content_label_position_type) {\r\n      case \"left\": {\r\n        return \"display: flex\";\r\n      }\r\n      case \"right\": {\r\n        return \"display:flex;flex-direction:row-reverse;justify-content:flex-end;\";\r\n      }\r\n    }\r\n    return \"\";\r\n  }}\r\n`;\r\n\r\nclass InputSelect2Widget extends Component {\r\n  timeInput = null;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    props.element.component = this;\r\n    if (window.elementDecorator) {\r\n      window.elementDecorator(this);\r\n    }\r\n    this.onChange = this.onChange.bind(this);\r\n    this.debounceDispatch = this.debounceDispatch.bind(this);\r\n\r\n    this.defaultValue =\r\n      this.getContent(\"content_default_value\") ||\r\n      (this.valueMustArray() ? [] : \"\");\r\n    if (this.valueMustArray() && !_.isArray(this.defaultValue)) {\r\n      this.defaultValue = [];\r\n    }\r\n    this.state = {\r\n      settings: { ...props.element.getSettings() },\r\n      value: this.defaultValue,\r\n      options: parseOptionsFromSettings(\r\n        props.element.getSettings(\"content_options\")\r\n      ),\r\n      paramsForUpdate: null\r\n    };\r\n    this.altrpSelectRef = React.createRef();\r\n    if (this.getContent(\"content_default_value\")) {\r\n      this.dispatchFieldValueToStore(this.getContent(\"content_default_value\"));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * В некоторых случаях значение поля должно быть массивом\r\n   * @return {boolean}\r\n   */\r\n  valueMustArray() {\r\n    if (\r\n      this.props.element.getName() === \"input-select2\" &&\r\n      this.props.element.getSettings(\"select2_multiple\")\r\n    ) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  /**\r\n   * Чистит значение\r\n   */\r\n  clearValue() {\r\n    let value = \"\";\r\n    if (\r\n      [\"input-select2\"].indexOf(\r\n        this.props.element.getName()\r\n      ) >= 0 &&\r\n      this.props.element.getSettings(\"select2_multiple\")\r\n    ) {\r\n      value = [];\r\n    }\r\n    this.onChange(value);\r\n    this.dispatchFieldValueToStore(value, true);\r\n  }\r\n  /**\r\n   * Метод устанавливает все опции как выбранные\r\n   */\r\n  selectAll() {\r\n    const optionsDynamicSetting = this.props.element.getDynamicSetting(\r\n      \"content_options\"\r\n    );\r\n    if (\r\n      [\"input-select2\"].indexOf(\r\n        this.props.element.getName()\r\n      ) >= 0 &&\r\n      this.props.element.getSettings(\"select2_multiple\")\r\n    ) {\r\n      let options = [...this.state.options];\r\n      if (!_.isArray(options)) {\r\n        options = [];\r\n      } else {\r\n        if (optionsDynamicSetting) {\r\n          options = convertData(optionsDynamicSetting, options);\r\n        }\r\n      }\r\n      this.onChange(options);\r\n    }\r\n  }\r\n  /**\r\n   * Обработка нажатия клавиши\r\n   * @param {{}} e\r\n   */\r\n  handleEnter = e => {\r\n    if (e.keyCode === 13) {\r\n      e.preventDefault();\r\n      const inputs = Array.from(document.querySelectorAll(\"input,select\"));\r\n      const index = inputs.indexOf(e.target);\r\n      if (index === undefined) return;\r\n      inputs[index + 1] && inputs[index + 1].focus();\r\n      const {\r\n        create_allowed,\r\n        create_label,\r\n        create_url\r\n      } = this.props.element.getSettings();\r\n      if (create_allowed && create_label && create_url) {\r\n        this.createItem(e);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Загрузка виджета\r\n   * @param {{}} prevProps\r\n   * @param {{}} prevState\r\n   */\r\n  async _componentDidMount(prevProps, prevState) {\r\n    if (this.props.element.getSettings(\"content_options\")) {\r\n      let options = parseOptionsFromSettings(\r\n        this.props.element.getSettings(\"content_options\")\r\n      );\r\n\r\n      this.setState(state => ({ ...state, options }));\r\n    } else if (\r\n      [\"input-select2\"].indexOf(this.props.element.getName()) >= 0 &&\r\n      this.state.settings.model_for_options\r\n    ) {\r\n      let options = await new Resource({ route: this.getRoute() }).getAll();\r\n      options = !_.isArray(options) ? options.data : options;\r\n      options = _.isArray(options) ? options : [];\r\n      this.setState(state => ({ ...state, options }));\r\n    }\r\n    let value = this.state.value;\r\n    /**\r\n     * Если динамическое значение загрузилось,\r\n     * то используем this.getContent для получение этого динамического значения\r\n     * старые динамические данные\r\n     * */\r\n    if (\r\n      _.get(value, \"dynamic\") &&\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n    }\r\n\r\n    if (\r\n      prevProps &&\r\n      !prevProps.currentModel.getProperty(\"altrpModelUpdated\") &&\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n      this.setState(\r\n        state => ({ ...state, value, contentLoaded: true }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    if (\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\") &&\r\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\r\n      !this.state.contentLoaded\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n      this.setState(\r\n        state => ({ ...state, value, contentLoaded: true }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n      return;\r\n    }\r\n    if (this.state.value !== value) {\r\n      this.setState(\r\n        state => ({ ...state, value }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Получить url для запросов\r\n   */\r\n  getRoute() {\r\n    let url = this.props.element.getSettings(\"model_for_options\");\r\n\r\n    if (url.indexOf(\"/\") === -1) {\r\n      return `/ajax/models/${url}_options`;\r\n    }\r\n    if (url.indexOf(\"{{\") !== -1) {\r\n      url = replaceContentWithData(url);\r\n    }\r\n    return url;\r\n  }\r\n  /**\r\n   * Обновление виджета\r\n   */\r\n  async _componentDidUpdate(prevProps, prevState) {\r\n    const { content_options, model_for_options } = this.state.settings;\r\n    if (\r\n      prevProps &&\r\n      !prevProps.currentDataStorage.getProperty(\"currentDataStorageLoaded\") &&\r\n      this.props.currentDataStorage.getProperty(\"currentDataStorageLoaded\")\r\n    ) {\r\n      let value = this.getContent(\r\n        \"content_default_value\",\r\n        this.props.element.getSettings(\"select2_multiple\")\r\n      );\r\n      this.setState(\r\n        state => ({ ...state, value, contentLoaded: true }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n    }\r\n    /**\r\n     * Если обновилась модель, то пробрасываем в стор новое значение (старый источник диамических данных)\r\n     */\r\n    if (\r\n      !_.isEqual(this.props.currentModel, prevProps.currentModel) &&\r\n      this.state.value &&\r\n      this.state.value.dynamic\r\n    ) {\r\n      this.dispatchFieldValueToStore(this.getContent(\"content_default_value\"));\r\n    }\r\n\r\n    /**\r\n     * Если обновилось хранилище данных формы, currentDataStorage или модель, то получаем новые опции c сервера\r\n     */\r\n    if (\r\n      this.props.formsStore !== prevProps.formsStore ||\r\n      this.props.currentModel !== prevProps.currentModel ||\r\n      this.props.currentDataStorage !== prevProps.currentDataStorage\r\n    ) {\r\n      this.updateOptions();\r\n    }\r\n    if (content_options && !model_for_options) {\r\n      let options = parseOptionsFromSettings(content_options);\r\n      if (!_.isEqual(options, this.state.options)) {\r\n        this.setState(state => ({ ...state, options }));\r\n      }\r\n    }\r\n    this.updateValue(prevProps);\r\n  }\r\n\r\n  /**\r\n   * Обновить значение если нужно\r\n   * @param {{}} prevProps\r\n   */\r\n  updateValue(prevProps) {\r\n    if (isEditor()) {\r\n      return;\r\n    }\r\n    let content_calculation = this.props.element.getSettings(\r\n      \"content_calculation\"\r\n    );\r\n    const altrpforms = this.props.formsStore;\r\n    const fieldName = this.props.element.getFieldId();\r\n    const formId = this.props.element.getFormId();\r\n    if (!content_calculation) {\r\n      /**\r\n       * Обновить значение, если formsStore изменилось из другого компонента\r\n       */\r\n      const path = `${formId}.${fieldName}`;\r\n      if (\r\n        this.props.formsStore !== prevProps.formsStore &&\r\n        _.get(altrpforms, path) !== this.state.value\r\n      ) {\r\n        this.setState(state => ({\r\n          ...state,\r\n          value: _.get(altrpforms, path)\r\n        }));\r\n      }\r\n      return;\r\n    }\r\n\r\n    const prevContext = {};\r\n\r\n    const altrpdata = this.props.currentDataStorage.getData();\r\n    const altrpmodel = this.props.currentModel.getData();\r\n    const altrpuser = this.props.currentUser.getData();\r\n    const altrppagestate = this.props.altrpPageState.getData();\r\n    const altrpresponses = this.props.altrpresponses.getData();\r\n    const altrpmeta = this.props.altrpMeta.getData();\r\n    const context = this.props.element.getCurrentModel().getData();\r\n    if (content_calculation.indexOf(\"altrpdata\") !== -1) {\r\n      context.altrpdata = altrpdata;\r\n      if (!altrpdata.currentDataStorageLoaded) {\r\n        prevContext.altrpdata = altrpdata;\r\n      } else {\r\n        prevContext.altrpdata = prevProps.currentDataStorage.getData();\r\n      }\r\n    }\r\n    if (content_calculation.indexOf(\"altrpforms\") !== -1) {\r\n      context.altrpforms = altrpforms;\r\n      /**\r\n       * Не производим вычисления, если изменилось текущее поле\r\n       */\r\n      if (`${formId}.${fieldName}` === altrpforms.changedField) {\r\n        prevContext.altrpforms = altrpforms;\r\n      } else {\r\n        prevContext.altrpforms = prevProps.formsStore;\r\n      }\r\n    }\r\n    if (content_calculation.indexOf(\"altrpmodel\") !== -1) {\r\n      context.altrpmodel = altrpmodel;\r\n      prevContext.altrpmodel = prevProps.currentModel.getData();\r\n    }\r\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\r\n      context.altrpuser = altrpuser;\r\n      prevContext.altrpuser = prevProps.currentUser.getData();\r\n    }\r\n    if (content_calculation.indexOf(\"altrpuser\") !== -1) {\r\n      context.altrpuser = altrpuser;\r\n      prevContext.altrpuser = prevProps.currentUser.getData();\r\n    }\r\n    if (content_calculation.indexOf(\"altrppagestate\") !== -1) {\r\n      context.altrppagestate = altrppagestate;\r\n      prevContext.altrppagestate = prevProps.altrpPageState.getData();\r\n    }\r\n    if (content_calculation.indexOf(\"altrpmeta\") !== -1) {\r\n      context.altrpmeta = altrpmeta;\r\n      prevContext.altrpmeta = prevProps.altrpMeta.getData();\r\n    }\r\n    if (content_calculation.indexOf(\"altrpresponses\") !== -1) {\r\n      context.altrpresponses = altrpresponses;\r\n      prevContext.altrpresponses = prevProps.altrpresponses.getData();\r\n    }\r\n\r\n    if (content_calculation.indexOf(\"altrpstorage\") !== -1) {\r\n      context.altrpstorage = getDataFromLocalStorage(\"altrpstorage\", {});\r\n    }\r\n\r\n    if (\r\n      _.isEqual(prevProps.currentDataStorage, this.props.currentDataStorage) &&\r\n      _.isEqual(prevProps.currentUser, this.props.currentUser) &&\r\n      _.isEqual(prevProps.formsStore, this.props.formsStore) &&\r\n      _.isEqual(prevProps.altrpPageState, this.props.altrpPageState) &&\r\n      _.isEqual(prevProps.altrpMeta, this.props.altrpMeta) &&\r\n      _.isEqual(prevProps.altrpresponses, this.props.altrpresponses) &&\r\n      _.isEqual(prevProps.currentModel, this.props.currentModel)\r\n    ) {\r\n      return;\r\n    }\r\n    if (\r\n      !_.isEqual(prevProps.formsStore, this.props.formsStore) &&\r\n      `${formId}.${fieldName}` === altrpforms.changedField\r\n    ) {\r\n      return;\r\n    }\r\n    let value = \"\";\r\n    try {\r\n      content_calculation = content_calculation\r\n        .replace(/}}/g, \"')\")\r\n        .replace(/{{/g, \"_.get(context, '\");\r\n      value = eval(content_calculation);\r\n      if (value === this.state.value) {\r\n        return;\r\n      }\r\n      this.setState(\r\n        state => ({ ...state, value }),\r\n        () => {\r\n          this.dispatchFieldValueToStore(value);\r\n        }\r\n      );\r\n    } catch (e) {\r\n      console.error(\r\n        \"Evaluate error in Input \" + e.message,\r\n        this.props.element.getId()\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Обновляет опции для селекта при обновлении данных, полей формы\r\n   */\r\n  async updateOptions() {\r\n    {\r\n      let formId = this.props.element.getFormId();\r\n      let paramsForUpdate = this.props.element.getSettings(\"params_for_update\");\r\n      let formData = _.get(this.props.formsStore, [formId], {});\r\n      paramsForUpdate = parseParamsFromString(\r\n        paramsForUpdate,\r\n        new AltrpModel(formData)\r\n      );\r\n      /**\r\n       * Сохраняем параметры запроса, и если надо обновляем опции\r\n       */\r\n      let options = [...this.state.options];\r\n      if (!_.isEqual(paramsForUpdate, this.state.paramsForUpdate)) {\r\n        if (!_.isEmpty(paramsForUpdate)) {\r\n          if (this.props.element.getSettings(\"params_as_filters\", false)) {\r\n            paramsForUpdate = JSON.stringify(paramsForUpdate);\r\n            options = await new Resource({\r\n              route: this.getRoute()\r\n            }).getQueried({ filters: paramsForUpdate });\r\n          } else {\r\n            options = await new Resource({ route: this.getRoute() }).getQueried(\r\n              paramsForUpdate\r\n            );\r\n          }\r\n          options = !_.isArray(options) ? options.data : options;\r\n          options = _.isArray(options) ? options : [];\r\n        } else if (this.state.paramsForUpdate) {\r\n          options = await new Resource({ route: this.getRoute() }).getAll();\r\n          options = !_.isArray(options) ? options.data : options;\r\n          options = _.isArray(options) ? options : [];\r\n        }\r\n        this.setState(state => ({\r\n          ...state,\r\n          paramsForUpdate,\r\n          options\r\n        }));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Изменение значения в виджете\r\n   * @param e\r\n   * @param  editor для получения изменений из CKEditor\r\n   */\r\n  onChange(e, editor = null) {\r\n    let value = \"\";\r\n    let valueToDispatch;\r\n    const settings = this.props.element.getSettings();\r\n    if (e && e.target) {\r\n      value = e.target.value;\r\n    }\r\n\r\n    if (e && e.value) {\r\n      value = e.value;\r\n    }\r\n    if (_.get(editor, \"getData\")) {\r\n      value = `<div class=\"ck ck-content\" style=\"width:100%\">${editor.getData()}</div>`;\r\n    }\r\n    if (_.isArray(e)) {\r\n      value = _.cloneDeep(e);\r\n    }\r\n    if (this.props.element.getName() === \"input-select2\") {\r\n      if (this.props.element.getSettings(\"select2_multiple\", false) && !e) {\r\n        value = [];\r\n      }\r\n      if (this.props.element.getSettings(\"select2_multiple\", false)) {\r\n        value = value.map(item => item.value);\r\n      }\r\n    }\r\n    if (\r\n      this.props.element.getSettings(\"content_options_nullable\") &&\r\n      e &&\r\n      e.value === \"<null>\"\r\n    ) {\r\n      value = null;\r\n    }\r\n\r\n    this.setState(\r\n      state => ({\r\n        ...state,\r\n        value\r\n      }),\r\n      () => {\r\n        /**\r\n         * Обновляем хранилище только если не текстовое поле\r\n         */\r\n\r\n        const change_actions = this.props.element.getSettings(\"change_actions\");\r\n        const change_change_end = this.props.element.getSettings(\r\n          \"change_change_end\"\r\n        );\r\n        const change_change_end_delay = this.props.element.getSettings(\r\n          \"change_change_end_delay\"\r\n        );\r\n\r\n        if (\r\n          [\"text\", \"email\", \"phone\", \"tel\", \"number\", \"password\"].indexOf(\r\n            this.state.settings.content_type\r\n          ) === -1\r\n        ) {\r\n          this.dispatchFieldValueToStore(\r\n            valueToDispatch !== undefined ? valueToDispatch : value,\r\n            true\r\n          );\r\n        }\r\n        if (change_actions && !change_change_end && !isEditor()) {\r\n          this.debounceDispatch(\r\n            valueToDispatch !== undefined ? valueToDispatch : value\r\n          );\r\n        }\r\n        if (change_actions && change_change_end && !isEditor()) {\r\n          this.timeInput && clearTimeout(this.timeInput);\r\n          this.timeInput = setTimeout(() => {\r\n            this.debounceDispatch(\r\n              valueToDispatch !== undefined ? valueToDispatch : value\r\n            );\r\n          }, change_change_end_delay);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  debounceDispatch = _.debounce(\r\n    value => this.dispatchFieldValueToStore(value, true),\r\n    150\r\n  );\r\n\r\n  /**\r\n   * получить опции\r\n   */\r\n  getOptions() {\r\n    let options = [...this.state.options];\r\n    const optionsDynamicSetting = this.props.element.getDynamicSetting(\r\n      \"content_options\"\r\n    );\r\n    if (optionsDynamicSetting) {\r\n      options = convertData(optionsDynamicSetting, options);\r\n    }\r\n    if (!this.props.element.getSettings(\"sort_default\")) {\r\n      options = _.sortBy(options, o => o && (o.label ? o.label.toString() : o));\r\n    }\r\n    return options;\r\n  }\r\n\r\n  /**\r\n   * Для действие по фокусу\r\n   * @param e\r\n   * @return {Promise<void>}\r\n   */\r\n\r\n  onFocus = async e => {\r\n    const focus_actions = this.props.element.getSettings(\"focus_actions\");\r\n\r\n    if (focus_actions && !isEditor()) {\r\n      const actionsManager = (\r\n        await import(\r\n          /* webpackChunkName: 'ActionsManager' */\r\n          \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\r\n        )\r\n      ).default;\r\n      await actionsManager.callAllWidgetActions(\r\n        this.props.element.getIdForAction(),\r\n        \"focus\",\r\n        focus_actions,\r\n        this.props.element\r\n      );\r\n    }\r\n  };\r\n  /**\r\n   * Потеря фокуса для оптимизации\r\n   * @param  e\r\n   * @param  editor для получения изменений из CKEditor\r\n   */\r\n  onBlur = async (e, editor = null) => {\r\n    if (_.get(editor, \"getData\")) {\r\n      this.dispatchFieldValueToStore(editor.getData(), true);\r\n    }\r\n    if (this.props.element.getSettings(\"actions\", []) && !isEditor()) {\r\n      const actionsManager = (\r\n        await import(\r\n          /* webpackChunkName: 'ActionsManager' */\r\n          \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\r\n        )\r\n      ).default;\r\n      await actionsManager.callAllWidgetActions(\r\n        this.props.element.getIdForAction(),\r\n        \"blur\",\r\n        this.props.element.getSettings(\"actions\", []),\r\n        this.props.element\r\n      );\r\n    }\r\n  };\r\n  /**\r\n   * Передадим значение в хранилище формы\r\n   * @param {*} value\r\n   * @param {boolean} userInput true - имзенилось пользователем\r\n   */\r\n  dispatchFieldValueToStore = async (value, userInput = false) => {\r\n    let formId = this.props.element.getFormId();\r\n    let fieldName = this.props.element.getFieldId();\r\n    if (fieldName.indexOf(\"{{\") !== -1) {\r\n      fieldName = replaceContentWithData(fieldName);\r\n    }\r\n    if (_.isObject(this.props.appStore) && fieldName && formId) {\r\n      this.props.appStore.dispatch(\r\n        changeFormFieldValue(fieldName, value, formId, userInput)\r\n      );\r\n      if (userInput) {\r\n        const change_actions = this.props.element.getSettings(\"change_actions\");\r\n\r\n        if (change_actions && !isEditor()) {\r\n          const actionsManager = (\r\n            await import(\r\n              /* webpackChunkName: 'ActionsManager' */\r\n              \"../../../../../front-app/src/js/classes/modules/ActionsManager.js\"\r\n            )\r\n          ).default;\r\n          await actionsManager.callAllWidgetActions(\r\n            this.props.element.getIdForAction(),\r\n            \"change\",\r\n            change_actions,\r\n            this.props.element\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Обработка добавления опции по ajax\r\n   * @param {SyntheticKeyboardEvent} e\r\n   */\r\n  createItem = async e => {\r\n    const keyCode = e.keyCode;\r\n    const { value: inputValue } = e.target;\r\n    if (keyCode !== 13 || !inputValue) {\r\n      return;\r\n    }\r\n    const {\r\n      create_url,\r\n      create_label,\r\n      create_data,\r\n      select2_multiple\r\n    } = this.props.element.getSettings();\r\n    if (!create_label && !create_url) {\r\n      return;\r\n    }\r\n    const currentModel = this.props.element.getCurrentModel();\r\n    let data = parseParamsFromString(create_data, currentModel, true);\r\n    data[create_label] = inputValue;\r\n    let url = parseURLTemplate(create_url, currentModel.getData());\r\n    this.setState(state => ({ ...state, isDisabled: true }));\r\n    try {\r\n      const resource = new Resource({\r\n        route: url\r\n      });\r\n      let res = await resource.post(data);\r\n      if (res.success && _.get(res, \"data.id\")) {\r\n        let newOption = {\r\n          label: inputValue,\r\n          value: _.get(res, \"data.id\")\r\n        };\r\n        this.setState(\r\n          state => ({ ...state, isDisabled: false }),\r\n          () => {\r\n            let options = [...this.state.options];\r\n            options.unshift(newOption);\r\n            let value = this.state.value;\r\n            if (select2_multiple) {\r\n              value = value ? [...value] : [];\r\n              value.push(_.get(res, \"data.id\"));\r\n            } else {\r\n              value = _.get(res, \"data.id\");\r\n            }\r\n            this.setState(\r\n              state => ({ ...state, options, value }),\r\n              () => {\r\n                const selectStateManager = _.get(\r\n                  this,\r\n                  \"altrpSelectRef.current.selectRef.current\"\r\n                );\r\n                if (selectStateManager) {\r\n                  selectStateManager.setState({\r\n                    menuIsOpen: false,\r\n                    inputValue: \"\"\r\n                  });\r\n                }\r\n              }\r\n            );\r\n          }\r\n        );\r\n      }\r\n      this.setState(state => ({ ...state, isDisabled: false }));\r\n    } catch (error) {\r\n      console.error(error);\r\n      this.setState(state => ({ ...state, isDisabled: false }));\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Взовращает имя для атрибута name\r\n   * @return {string}\r\n   */\r\n  getName() {\r\n    return `${this.props.element.getFormId()}[${this.props.element.getFieldId()}]`;\r\n  }\r\n\r\n  render() {\r\n    let label = null;\r\n    const settings = this.props.element.getSettings();\r\n    const {\r\n      content_readonly,\r\n      select2_multiple: isMultiple,\r\n      label_icon\r\n    } = settings;\r\n\r\n    let value = this.state.value;\r\n\r\n    if (\r\n      _.get(value, \"dynamic\") &&\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\r\n    ) {\r\n      value = this.getContent(\"content_default_value\");\r\n    }\r\n    /**\r\n     * Пока динамический контент загружается (Еесли это динамический контент),\r\n     * нужно вывести пустую строку\r\n     */\r\n    if (value && value.dynamic) {\r\n      value = \"\";\r\n    }\r\n    let classLabel = \"\";\r\n    let styleLabel = {};\r\n    const content_label_position_type = this.props.element.getResponsiveSetting(\r\n      \"content_label_position_type\"\r\n    );\r\n    switch (content_label_position_type) {\r\n      case \"top\":\r\n        styleLabel = {\r\n          marginBottom: this.state.settings.label_style_spacing\r\n            ? this.state.settings.label_style_spacing.size +\r\n            this.state.settings.label_style_spacing.unit\r\n            : 2 + \"px\"\r\n        };\r\n        classLabel = \"\";\r\n        break;\r\n      case \"bottom\":\r\n        styleLabel = {\r\n          marginTop: this.state.settings.label_style_spacing\r\n            ? this.state.settings.label_style_spacing.size +\r\n            this.state.settings.label_style_spacing.unit\r\n            : 2 + \"px\"\r\n        };\r\n        classLabel = \"\";\r\n        break;\r\n      case \"left\":\r\n        styleLabel = {\r\n          marginRight: this.state.settings.label_style_spacing\r\n            ? this.state.settings.label_style_spacing.size +\r\n            this.state.settings.label_style_spacing.unit\r\n            : 2 + \"px\"\r\n        };\r\n        classLabel = \"altrp-field-label-container-left\";\r\n        // this.label.current.classList.add(\"hello\")\r\n\r\n        break;\r\n      case \"absolute\":\r\n        styleLabel = {\r\n          position: \"absolute\",\r\n          zIndex: 2\r\n        };\r\n        classLabel = \"\";\r\n        break;\r\n    }\r\n\r\n    if (this.state.settings.content_label) {\r\n      label = (\r\n        <div\r\n          className={\"altrp-field-label-container \" + classLabel}\r\n          style={styleLabel}\r\n        >\r\n          <label\r\n            className={`altrp-field-label ${this.state.settings.content_required\r\n              ? \"altrp-field-label--required\"\r\n              : \"\"\r\n              }`}\r\n          >\r\n            {this.state.settings.content_label}\r\n          </label>\r\n          {label_icon && label_icon.assetType && (\r\n            <span className=\"altrp-label-icon\">\r\n              {renderAssetIcon(label_icon)}\r\n            </span>\r\n          )}\r\n        </div>\r\n      );\r\n    } else {\r\n      label = null;\r\n    }\r\n\r\n    let autocomplete = \"off\";\r\n    if (this.state.settings.content_autocomplete) {\r\n      autocomplete = \"on\";\r\n    } else {\r\n      autocomplete = \"off\";\r\n    }\r\n\r\n    let input = null;\r\n    switch (this.props.element.getName()) {\r\n      case \"input-select2\":\r\n        {\r\n          input = this.renderSelect2();\r\n        }\r\n        break;\r\n      default: {\r\n        const isClearable = this.state.settings.content_clearable;\r\n        const isDate = this.state.settings.content_type === \"date\";\r\n        const timestamp = this.props.element.getSettings(\"content_timestamp\");\r\n        if (isDate && timestamp) {\r\n          const isValid = moment.unix(value).isValid();\r\n          if (isValid) {\r\n            try {\r\n              value = moment.unix(value / 1000).format(\"YYYY-MM-DD\");\r\n            } catch (error) {\r\n              console.log(error);\r\n            }\r\n          }\r\n        }\r\n        input = (\r\n          <div className=\"altrp-input-wrapper\">\r\n            <AltrpInput\r\n              type=\"select2\"\r\n              name={this.getName()}\r\n              value={value || \"\"}\r\n              element={this.props.element}\r\n              readOnly={content_readonly}\r\n              autoComplete={autocomplete}\r\n              placeholder={this.state.settings.content_placeholder}\r\n              className={\r\n                \"altrp-field \" + this.state.settings.position_css_classes\r\n              }\r\n              settings={this.props.element.getSettings()}\r\n              onKeyDown={this.handleEnter}\r\n              onChange={this.onChange}\r\n              onBlur={this.onBlur}\r\n              onFocus={this.onFocus}\r\n              id={this.state.settings.position_css_id}\r\n            />\r\n            {isClearable && (\r\n              <button\r\n                className=\"input-clear-btn\"\r\n                onClick={() => this.setState({ value: this.defaultValue })}\r\n              >\r\n                ✖\r\n              </button>\r\n            )}\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    return (\r\n      <AltrpFieldContainer\r\n        settings={settings}\r\n        className={\"altrp-field-container \"}\r\n      >\r\n        {content_label_position_type === \"top\" ? label : \"\"}\r\n        {content_label_position_type === \"left\" ? label : \"\"}\r\n        {content_label_position_type === \"right\" ? label : \"\"}\r\n        {content_label_position_type === \"absolute\" ? label : \"\"}\r\n        {/* .altrp-field-label-container */}\r\n        {input}\r\n        {content_label_position_type === \"bottom\" ? label : \"\"}\r\n      </AltrpFieldContainer>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Выводит инпут-select2, используя компонент AltrpSelect\r\n   */\r\n  renderSelect2() {\r\n    const {\r\n      content_options_nullable,\r\n      nulled_option_title,\r\n      content_placeholder\r\n    } = this.props.element.getSettings();\r\n\r\n    let options = this.getOptions();\r\n    let value = this.state.value;\r\n    if (\r\n      _.get(value, \"dynamic\") &&\r\n      this.props.currentModel.getProperty(\"altrpModelUpdated\")\r\n    ) {\r\n      value = this.getContent(\"content_default_value\", true);\r\n    }\r\n    /**\r\n     * Пока динамический контент загружается, нужно вывести пустую строку\r\n     */\r\n    if (value && value.dynamic) {\r\n      value = \"\";\r\n    }\r\n    if (!this.props.element.getSettings(\"select2_multiple\", false)) {\r\n      options.forEach(option => {\r\n        if (!option) {\r\n          return;\r\n        }\r\n        if (option.value === value) {\r\n          value = { ...option };\r\n        }\r\n        if (_.isArray(option.options)) {\r\n          option.options.forEach(option => {\r\n            if (option.value == value) {\r\n              value = { ...option };\r\n            }\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      /**\r\n       * Если включен мультиселект\r\n       */\r\n      value = value ? (_.isArray(value) ? value : [value]) : [];\r\n      value = value.map(v => {\r\n        let _v = v;\r\n        options.forEach(option => {\r\n          if (option.value && option.value.toString() === _v.toString()) {\r\n            _v = { ...option };\r\n          }\r\n          if (_.isArray(option.options)) {\r\n            option.options.forEach(option => {\r\n              if (option.value && option.value.toString() === _v.toString()) {\r\n                _v = { ...option };\r\n              }\r\n            });\r\n          }\r\n        });\r\n        return _v;\r\n      });\r\n      /**\r\n       * Добавим опцию, если для какого-то значения ее нет\r\n       */\r\n      value.forEach(valueItem => {\r\n        if (!_.isObject(valueItem)) {\r\n          options.push({\r\n            value: valueItem,\r\n            label: valueItem\r\n          });\r\n        }\r\n      });\r\n    }\r\n    /**\r\n     * Сортируем опции\r\n     * @type {Array|*}\r\n     */\r\n    if (\r\n      content_options_nullable &&\r\n      (this.props.element.getName() !== \"input-select2\" ||\r\n        this.props.element.getSettings(\"select2_multiple\") !== true)\r\n    ) {\r\n      options = _.union(\r\n        [{ label: nulled_option_title, value: \"<null>\" }],\r\n        options\r\n      );\r\n    }\r\n    const select2Props = {\r\n      className: \"altrp-field-select2\",\r\n      onFocus: this.onFocus,\r\n      element: this.props.element,\r\n      classNamePrefix: this.props.element.getId() + \" altrp-field-select2\",\r\n      options,\r\n      name: this.props.element.getFieldId(),\r\n      ref: this.altrpSelectRef,\r\n      settings: this.props.element.getSettings(),\r\n      onChange: this.onChange,\r\n      onBlur: this.onBlur,\r\n      value: value || _.find(options, o => o && o.value == this.state.value),\r\n      isOptionSelected: option => {\r\n        if (_.isNumber(this.state.value) || _.isString(this.state.value)) {\r\n          return this.state.value == option.value;\r\n        }\r\n        return this.state.value && this.state.value.includes(option.value);\r\n      },\r\n      placeholder: content_placeholder,\r\n      isMulti: this.props.element.getSettings(\"select2_multiple\", false),\r\n      onKeyDown: this.handleEnter\r\n      // menuIsOpen: true,\r\n    };\r\n    return (\r\n      <div className=\"altrp-input-wrapper\">\r\n        <AltrpSelect {...select2Props} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputSelect2Widget;\r\n","import _objectWithoutProperties from '@babel/runtime/helpers/esm/objectWithoutProperties';\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport '@babel/runtime/helpers/slicedToArray';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport '@babel/runtime/helpers/defineProperty';\nimport _classCallCheck from '@babel/runtime/helpers/esm/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/esm/createClass';\nimport '@babel/runtime/helpers/assertThisInitialized';\nimport _inherits from '@babel/runtime/helpers/esm/inherits';\nimport _possibleConstructorReturn from '@babel/runtime/helpers/esm/possibleConstructorReturn';\nimport _getPrototypeOf from '@babel/runtime/helpers/esm/getPrototypeOf';\nimport React, { Component } from 'react';\nimport 'memoize-one';\nimport '@emotion/core';\nimport 'react-dom';\nimport '@babel/runtime/helpers/typeof';\nimport { G as handleInputChange } from '../../dist/index-75b02bac.browser.esm.js';\nimport { S as Select } from '../../dist/Select-e1cf49ae.browser.esm.js';\nimport '@emotion/css';\nimport '@babel/runtime/helpers/taggedTemplateLiteral';\nimport 'react-input-autosize';\nimport { m as manageState } from '../../dist/stateManager-2f2b6f5b.browser.esm.js';\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\nvar defaultProps = {\n  cacheOptions: false,\n  defaultOptions: false,\n  filterOption: null,\n  isLoading: false\n};\nvar makeAsyncSelect = function makeAsyncSelect(SelectComponent) {\n  var _class, _temp;\n\n  return _temp = _class = /*#__PURE__*/function (_Component) {\n    _inherits(Async, _Component);\n\n    var _super = _createSuper(Async);\n\n    function Async(props) {\n      var _this;\n\n      _classCallCheck(this, Async);\n\n      _this = _super.call(this);\n      _this.select = void 0;\n      _this.lastRequest = void 0;\n      _this.mounted = false;\n      _this.optionsCache = {};\n\n      _this.handleInputChange = function (newValue, actionMeta) {\n        var _this$props = _this.props,\n            cacheOptions = _this$props.cacheOptions,\n            onInputChange = _this$props.onInputChange; // TODO\n\n        var inputValue = handleInputChange(newValue, actionMeta, onInputChange);\n\n        if (!inputValue) {\n          delete _this.lastRequest;\n\n          _this.setState({\n            inputValue: '',\n            loadedInputValue: '',\n            loadedOptions: [],\n            isLoading: false,\n            passEmptyOptions: false\n          });\n\n          return;\n        }\n\n        if (cacheOptions && _this.optionsCache[inputValue]) {\n          _this.setState({\n            inputValue: inputValue,\n            loadedInputValue: inputValue,\n            loadedOptions: _this.optionsCache[inputValue],\n            isLoading: false,\n            passEmptyOptions: false\n          });\n        } else {\n          var request = _this.lastRequest = {};\n\n          _this.setState({\n            inputValue: inputValue,\n            isLoading: true,\n            passEmptyOptions: !_this.state.loadedInputValue\n          }, function () {\n            _this.loadOptions(inputValue, function (options) {\n              if (!_this.mounted) return;\n\n              if (options) {\n                _this.optionsCache[inputValue] = options;\n              }\n\n              if (request !== _this.lastRequest) return;\n              delete _this.lastRequest;\n\n              _this.setState({\n                isLoading: false,\n                loadedInputValue: inputValue,\n                loadedOptions: options || [],\n                passEmptyOptions: false\n              });\n            });\n          });\n        }\n\n        return inputValue;\n      };\n\n      _this.state = {\n        defaultOptions: Array.isArray(props.defaultOptions) ? props.defaultOptions : undefined,\n        inputValue: typeof props.inputValue !== 'undefined' ? props.inputValue : '',\n        isLoading: props.defaultOptions === true,\n        loadedOptions: [],\n        passEmptyOptions: false\n      };\n      return _this;\n    }\n\n    _createClass(Async, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n\n        this.mounted = true;\n        var defaultOptions = this.props.defaultOptions;\n        var inputValue = this.state.inputValue;\n\n        if (defaultOptions === true) {\n          this.loadOptions(inputValue, function (options) {\n            if (!_this2.mounted) return;\n            var isLoading = !!_this2.lastRequest;\n\n            _this2.setState({\n              defaultOptions: options || [],\n              isLoading: isLoading\n            });\n          });\n        }\n      }\n    }, {\n      key: \"UNSAFE_componentWillReceiveProps\",\n      value: function UNSAFE_componentWillReceiveProps(nextProps) {\n        // if the cacheOptions prop changes, clear the cache\n        if (nextProps.cacheOptions !== this.props.cacheOptions) {\n          this.optionsCache = {};\n        }\n\n        if (nextProps.defaultOptions !== this.props.defaultOptions) {\n          this.setState({\n            defaultOptions: Array.isArray(nextProps.defaultOptions) ? nextProps.defaultOptions : undefined\n          });\n        }\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this.mounted = false;\n      }\n    }, {\n      key: \"focus\",\n      value: function focus() {\n        this.select.focus();\n      }\n    }, {\n      key: \"blur\",\n      value: function blur() {\n        this.select.blur();\n      }\n    }, {\n      key: \"loadOptions\",\n      value: function loadOptions(inputValue, callback) {\n        var loadOptions = this.props.loadOptions;\n        if (!loadOptions) return callback();\n        var loader = loadOptions(inputValue, callback);\n\n        if (loader && typeof loader.then === 'function') {\n          loader.then(callback, function () {\n            return callback();\n          });\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this3 = this;\n\n        var _this$props2 = this.props,\n            loadOptions = _this$props2.loadOptions,\n            isLoadingProp = _this$props2.isLoading,\n            props = _objectWithoutProperties(_this$props2, [\"loadOptions\", \"isLoading\"]);\n\n        var _this$state = this.state,\n            defaultOptions = _this$state.defaultOptions,\n            inputValue = _this$state.inputValue,\n            isLoading = _this$state.isLoading,\n            loadedInputValue = _this$state.loadedInputValue,\n            loadedOptions = _this$state.loadedOptions,\n            passEmptyOptions = _this$state.passEmptyOptions;\n        var options = passEmptyOptions ? [] : inputValue && loadedInputValue ? loadedOptions : defaultOptions || [];\n        return /*#__PURE__*/React.createElement(SelectComponent, _extends({}, props, {\n          ref: function ref(_ref) {\n            _this3.select = _ref;\n          },\n          options: options,\n          isLoading: isLoading || isLoadingProp,\n          onInputChange: this.handleInputChange\n        }));\n      }\n    }]);\n\n    return Async;\n  }(Component), _class.defaultProps = defaultProps, _temp;\n};\nvar SelectState = manageState(Select);\nvar Async = makeAsyncSelect(SelectState);\n\nexport default Async;\nexport { defaultProps, makeAsyncSelect };\n"],"sourceRoot":""}