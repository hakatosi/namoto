{"version":3,"sources":["webpack:///./resources/modules/front-app/src/js/components/FrontPopupWrapper.js","webpack:///./resources/modules/front-app/src/js/components/altrp-offcanvas/AltrpOffcanvas.js","webpack:///./resources/modules/front-app/src/js/components/FrontPopup.js"],"names":["getResponsiveSetting","window","altrpHelpers","styled","div","settings","styles","layout_bg","_","get","width_popup_layout","size","unit","content_position_popup_layout","height_custom_popup_layout","sliderStyled","close_pa","dimensionsControllerToStyles","close_right","close_top","close_c","colorPropertyStyled","icon_fill","time_offcanvas","props","state","elementId","template","getId","show","offcanvasRef","React","offcanvasContentRef","bind","hide","hideButton","mainContent","document","getElementsByClassName","this","setState","addEventListener","animations_offcanvas","direction_offcanvas","style","width","left","e","path","includes","current","close","hideAnimation","setTimeout","removeEventListener","prevProps","classes","classesWrapper","content","rootElement","componentClass","element","children","close_cursor_offcanvas","overflow_visible_offcanvas","closeButton","switcher_close_button_popup_layout","className","popup_close_icon_alignment","onClick","AltrpImage","image","popup_close_icon","default","assetType","name","ref","ReactDOM","autoHide","autoHideTimeout","autoHideDuration","universal","getElementById","Component","iconsManager","FrontPopup","ElementWrapper","isVisible","frontElementsFabric","parseData","data","page","models","isShownOnScroll","getContent","popupTrigger","getSettings","popupID","closePopup","popupGUID","rootElementSettings","popup_close_icon_width_size","popup_close_icon_height_size","rootElementId","close_context","push","overlayCondition","height_popup_layout","horizontal_position_popup_layout","vertical_position_popup_layout","closeButtonCondition","lazy","height","url","renderIcon","popup","join","stopPropagation","renderThumbHorizontal","renderTrackHorizontal","renderTrackVertical","createElement","AltrpOffcanvas","reactRedux","connect","scrollPosition","dispatch","togglePopup"],"mappings":"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","file":"3825.editor.js","sourcesContent":["const {getResponsiveSetting} = window.altrpHelpers;\nimport {\n  shadowControllerToStyles,\n  dimensionsControllerToStyles,\n  sliderStyled,\n  colorPropertyStyled\n} from '../helpers/styles';\n\n\nconst FrontPopupWrapper = window.styled.div`\n&{\n  overflow: hidden;\n${({settings}) => {\n  let styles = \"\";\n  const layout_bg = getResponsiveSetting(settings, 'layout_bg')\n  styles += `background-color:${_.get(layout_bg, 'color', 'rgba(0,0,0,0.7)')};`\n  return styles\n}\n}\n& .popup-content {\n  ${({settings}) => {\n  let styles = \"\";\n  const height_custom_popup_layout = getResponsiveSetting(settings, 'height_custom_popup_layout')\n  if (height_custom_popup_layout) {\n\n  }\n  if (settings.width_popup_layout && settings.width_popup_layout.size)\n    styles += `width: ${settings.width_popup_layout.size} ${settings.width_popup_layout.unit};`;\n\n  return styles;\n}}\n}\n& .popup-window > .popup-scrollbar > div{\n  ${({settings}) => {\n  let styles = \"\";\n  const content_position_popup_layout = getResponsiveSetting(settings, 'content_position_popup_layout')\n  if (content_position_popup_layout && content_position_popup_layout !== 'flex-start') {\n    styles += `align-items:${content_position_popup_layout};`\n    styles += `display:flex;`\n  }\n  return styles;\n}}\n}\n&& .popup-window{\n  ${({settings}) => {\n  let styles = \"\";\n  const height_custom_popup_layout = getResponsiveSetting(settings, 'height_custom_popup_layout')\n  if (height_custom_popup_layout) {\n    styles += `height:${sliderStyled(height_custom_popup_layout)};`\n  }\n  const content_position_popup_layout = getResponsiveSetting(settings, 'content_position_popup_layout')\n  if (content_position_popup_layout) {\n    styles += `justify-content:${content_position_popup_layout};`\n  }\n  const width_popup_layout = getResponsiveSetting(settings, 'width_popup_layout')\n  if (width_popup_layout) {\n    styles += `width:${sliderStyled(width_popup_layout)};`\n  }\n\n  return styles;\n}}\n  max-height: 100%;\n  max-width: 100%;\n}\n& .popup-close-button .altrp-image-placeholder svg{\n  width: 100%;\n  height: 100%;\n}\n&&& .popup-close-button{\n  transform: translate(50%, -50%);\n  padding: 0;\n  ${({settings}) => {\n  let styles = ''\n  const close_pa = getResponsiveSetting(settings, 'close_pa')\n  if(close_pa){\n    styles += dimensionsControllerToStyles(close_pa, 'padding')\n  }\n  const close_right = getResponsiveSetting(settings, 'close_right')\n  if(close_right){\n    styles += `right:${sliderStyled(close_right)};`\n  }\n  const close_top = getResponsiveSetting(settings, 'close_top')\n  if(close_top){\n    styles += `top:${sliderStyled(close_top)};`\n  }\n  let close_c = getResponsiveSetting(settings, 'close_c');\n  if(close_c){\n    styles += colorPropertyStyled(close_c, 'background-color')\n  }\n  close_c = getResponsiveSetting(settings, 'close_c', '.active');\n  if(close_c){\n    styles += `&:active{${colorPropertyStyled(close_c, 'background-color')}}`\n  }\n  close_c = getResponsiveSetting(settings, 'close_c', ':hover');\n  if(close_c){\n    styles += `&:hover{${colorPropertyStyled(close_c, 'background-color')}}`\n  }\n  let icon_fill = getResponsiveSetting(settings, 'icon_fill');\n  if(icon_fill){\n    styles += `& svg *{${colorPropertyStyled(icon_fill, 'fill')}}`\n  }\n  icon_fill = getResponsiveSetting(settings, 'icon_fill', ':hover');\n  if(icon_fill){\n    styles += `&:hover svg *{${colorPropertyStyled(icon_fill, 'fill')}}`\n  }\n  icon_fill = getResponsiveSetting(settings, 'icon_fill', '.active');\n  if(icon_fill){\n    styles += `&:active svg *{${colorPropertyStyled(icon_fill, 'fill')}}`\n  }\n  return styles;\n}\n}\n& .altrp-offcanvas {\n  ${({settings}) => {\n  let styles = '';\n  if (settings.time_offcanvas && settings.time_offcanvas.size) {\n    styles += `animation-duration: ${settings.time_offcanvas.size}${settings.time_offcanvas.unit} !important;`\n  }\n  return styles;\n}}\n}\n`\n\nexport default FrontPopupWrapper;\n","import { isEditor } from \"../../helpers\";\r\nimport \"./altrp-offcanvas.scss\";\r\nimport TemplateLoader from \"../../../../../editor/src/js/components/template-loader/TemplateLoader\";\r\nimport ReactDOM from \"react-dom\";\r\nimport React, { Component } from \"react\";\r\nimport AltrpImage from \"../../../../../editor/src/js/components/altrp-image/AltrpImage\";\r\nimport { Scrollbars } from \"react-custom-scrollbars\";\r\nimport FrontPopupWrapper from \"../FrontPopupWrapper\";\r\n\r\nclass OffcanvasWidget extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      settings: props.settings,\r\n      elementId: props.template.getId(),\r\n      show: false\r\n    };\r\n\r\n    this.offcanvasRef = React.createRef();\r\n    this.offcanvasContentRef = React.createRef();\r\n\r\n    this.show = this.show.bind(this);\r\n    this.hide = this.hide.bind(this);\r\n    this.hideButton = this.hideButton.bind(this);\r\n    this.mainContent = document.getElementsByClassName(\"main-content\")[0];\r\n  }\r\n\r\n  show() {\r\n    this.setState({\r\n      show: true\r\n    });\r\n    document.addEventListener(\"click\", this.hide);\r\n    if (this.state.settings.animations_offcanvas === \"push\") {\r\n      if (this.state.settings.direction_offcanvas === \"left\") {\r\n        this.mainContent.style.width = \"70%\";\r\n        this.mainContent.style.left = \"30%\";\r\n      } else if (this.state.settings.direction_offcanvas === \"right\") {\r\n        this.mainContent.style.width = \"70%\";\r\n      }\r\n    }\r\n  }\r\n\r\n  hide(e) {\r\n    if (!e.path.includes(this.offcanvasContentRef.current)) {\r\n      this.props.close();\r\n      this.setState(state => {\r\n        return {\r\n          ...state,\r\n          hideAnimation: true\r\n        };\r\n      });\r\n      setTimeout(() => {\r\n        this.setState({\r\n          hideAnimation: false,\r\n          show: false\r\n        });\r\n      }, 200);\r\n      document.removeEventListener(\"click\", this.hide);\r\n    }\r\n    this.mainContent.style.width = \"100%\";\r\n    this.mainContent.style.left = \"0\";\r\n  }\r\n\r\n  hideButton() {\r\n    this.setState(state => {\r\n      return {\r\n        ...state,\r\n        hideAnimation: true\r\n      };\r\n    });\r\n    setTimeout(() => {\r\n      this.setState({\r\n        hideAnimation: false,\r\n        show: false\r\n      });\r\n      document.removeEventListener(\"click\", this.hide);\r\n    }, 200);\r\n    this.props.close();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.show !== prevProps.show) {\r\n      this.show();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let classes = \"altrp-offcanvas\";\r\n\r\n    switch (this.state.settings.direction_offcanvas) {\r\n      case \"left\":\r\n        classes += \" altrp-offcanvas-left altrp-offcanvas-vertical\";\r\n        break;\r\n      case \"right\":\r\n        classes += \" altrp-offcanvas-right altrp-offcanvas-vertical\";\r\n        break;\r\n      case \"top\":\r\n        classes += \" altrp-offcanvas-top altrp-offcanvas-horizontal\";\r\n        break;\r\n      case \"bottom\":\r\n        classes += \" altrp-offcanvas-bottom altrp-offcanvas-horizontal\";\r\n        break;\r\n      case \"topLeft\":\r\n        classes +=\r\n          \" altrp-offcanvas-top-left altrp-offcanvas-horizontal altrp-offcanvas-vertical\";\r\n        break;\r\n      case \"topRight\":\r\n        classes +=\r\n          \" altrp-offcanvas-top-right altrp-offcanvas-horizontal altrp-offcanvas-vertical\";\r\n        break;\r\n      case \"bottomLeft\":\r\n        classes +=\r\n          \" altrp-offcanvas-bottom-left altrp-offcanvas-horizontal altrp-offcanvas-vertical\";\r\n        break;\r\n      case \"bottomRight\":\r\n        classes +=\r\n          \" altrp-offcanvas-bottom-right altrp-offcanvas-horizontal altrp-offcanvas-vertical\";\r\n        break;\r\n    }\r\n\r\n    let classesWrapper = \"\";\r\n    switch (this.state.settings.animations_offcanvas) {\r\n      case \"push\":\r\n        classesWrapper += \" altrp-offcanvas-animation-push\";\r\n        break;\r\n      case \"reveal\":\r\n        classesWrapper += \" altrp-offcanvas-animation-reveal\";\r\n        break;\r\n      case \"none\":\r\n        classesWrapper += \" altrp-offcanvas-animation-none\";\r\n        break;\r\n      default:\r\n        classesWrapper += \" altrp-offcanvas-animation-slide\";\r\n    }\r\n\r\n    let content = \"\";\r\n    let rootElement = this.props.template;\r\n\r\n    if (rootElement) {\r\n      content = React.createElement(rootElement.componentClass, {\r\n        element: rootElement,\r\n        children: rootElement.children\r\n      });\r\n    }\r\n    classesWrapper += ` altrp-offcanvas-wrapper-cursor-${\r\n      this.state.settings.close_cursor_offcanvas\r\n    } ${\r\n      this.state.settings.overflow_visible_offcanvas\r\n        ? \"altrp-offcanvas-wrapper-overflow-visible\"\r\n        : \"\"\r\n    }`;\r\n\r\n    const closeButton = this.state.settings\r\n      .switcher_close_button_popup_layout ? (\r\n      <div\r\n        className={\r\n          \"altrp-offcanvas-button popup-close-button\" +\r\n          ` altrp-offcanvas-button-${this.state.settings.popup_close_icon_alignment}`\r\n        }\r\n        onClick={this.hideButton}\r\n      >\r\n        <AltrpImage\r\n          image={this.state.settings.popup_close_icon}\r\n          default={{ assetType: \"icon\", name: \"deleteOne\" }}\r\n          className=\"altrp-offcanvas-button-icon popup-close-button-icon\"\r\n        />\r\n      </div>\r\n    ) : (\r\n      \"\"\r\n    );\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"altrp-offcanvas-ref\" ref={this.offcanvasRef} />\r\n        {ReactDOM.createPortal(\r\n          <FrontPopupWrapper settings={this.state.settings}>\r\n            <div\r\n              className={\r\n                \"altrp-offcanvas-wrapper\" +\r\n                (this.state.show ? \" altrp-offcanvas-wrapper-show\" : \"\") +\r\n                ` ${this.state.elementId}-altrp-offcanvas` +\r\n                (this.state.hideAnimation\r\n                  ? \" altrp-offcanvas-wrapper-animation-hide\"\r\n                  : \"\") +\r\n                classesWrapper\r\n              }\r\n            >\r\n              <div className={classes} ref={this.offcanvasContentRef}>\r\n                <Scrollbars\r\n                  autoHide\r\n                  autoHideTimeout={1000}\r\n                  autoHideDuration={200}\r\n                  universal={true}\r\n                >\r\n                  {closeButton}\r\n\r\n                  {content}\r\n                </Scrollbars>\r\n              </div>\r\n            </div>\r\n          </FrontPopupWrapper>,\r\n          document.getElementById(\"front-app\")\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OffcanvasWidget;\r\n","const {getResponsiveSetting, iconsManager} = window.altrpHelpers\nimport { Scrollbars } from \"react-custom-scrollbars\";\nimport AltrpOffcanvas from \"./altrp-offcanvas/AltrpOffcanvas\";\nimport { togglePopup } from \"../store/popup-trigger/actions\";\nimport AltrpImage from \"../../../../editor/src/js/components/altrp-image/AltrpImage\";\nimport FrontPopupWrapper from \"./FrontPopupWrapper\";\n\nclass FrontPopup extends Component {\n  constructor(props) {\n    super(props);\n    this.ElementWrapper = props.ElementWrapper || window.ElementWrapper;\n    this.state = {\n      isVisible: false,\n      rootElement: window.frontElementsFabric.parseData(\n        this.props.template.data,\n        null,\n        this.props.page,\n        this.props.models\n      ),\n      isShownOnScroll: false\n    };\n    this.close = this.close.bind(this);\n  }\n\n  componentDidMount() {\n    switch (this.state.rootElement.getContent(\"type_popup\")) {\n      case \"popup\":\n        // const { on_page_load, on_click, inactivity, on_exit, to_element } = _.get(this.props, 'template.triggers.data', {});\n\n        // if (on_page_load || on_page_load === 0) {\n        //   setTimeout(() => this.setState({ isVisible: true }), on_page_load * 1000)\n        // }\n        //\n        // if (on_click) {\n        //   this.clickCounter = 0;\n        //   document.addEventListener('click', () => {\n        //     this.clickCounter += 1;\n        //     if (this.clickCounter === +on_click) {\n        //       this.clickCounter = 0;\n        //       this.setState({ isVisible: true });\n        //     }\n        //   })\n        // }\n        //\n        // if (inactivity) {\n        //   this.inactivityTimeout = setTimeout(() => this.setState({ isVisible: true }), inactivity * 1000);\n        //\n        //   this.resetTimer = () => {\n        //     clearTimeout(this.inactivityTimeout);\n        //     this.inactivityTimeout = setTimeout(() => this.setState({ isVisible: true }), inactivity * 1000);\n        //   };\n        //\n        //   const events = ['mousedown', 'keydown', 'touchstart'];\n        //   events.forEach(event => {\n        //     document.addEventListener(event, this.resetTimer, true);\n        //   });\n        // }\n        //\n        // if (on_exit) {\n        //   // window.addEventListener('beforeunload', (event) => {\n        //   //   // Отмените событие, как указано в стандарте.\n        //   //   event.preventDefault();\n        //   //   this.setState({ isVisible: true })\n        //   //   // Хром требует установки возвратного значения.\n        //   //   event.returnValue = '';\n        //   // });\n        //   document.addEventListener('mouseleave', () => this.setState({ isVisible: true }))\n        // }\n\n        // if (to_element) {\n        //   const htmlCollection = document.getElementsByClassName(to_element);\n        //   console.log(htmlCollection);\n        //   this.elements = []\n        //   for (let index = 0; index < htmlCollection.length; index++) {\n        //     const element = htmlCollection[index];\n        //     this.elements[index] = getTopPosition(element);\n        //   }\n        //   console.log(this.elements);\n        // }\n        break;\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    let { popupTrigger } = this.props;\n\n    switch (this.state.rootElement.getSettings(\"type_popup\", \"popup\")) {\n      case \"popup\":\n        // if (on_scroll && !isShownOnScroll && on_scroll.size <= this.props.scrollPosition.top * 100) {\n        //   this.setState({ isVisible: true, isShownOnScroll: true });\n        //\n        // }\n        // if (this.resetTimer && this.props.scrollPosition.top !== prevProps.scrollPosition.top) {\n        //\n        //  this.resetTimer();\n        //\n        // }\n        // if (to_element && this.props.scrollPosition.top !== prevProps.scrollPosition.top) {\n        //\n        //  // console.log(this.elements)\n        //\n        //  console.log(this.props.scrollPosition.scrollTop)\n        //  const { scrollTop, clientHeight } = this.props.scrollPosition;\n        //\n        //  for (let index = 0; index < this.elements.length; index++) {\n        //\n        //    const element = this.elements[index];\n        //\n        //     if (isElementTopInViewport(element, scrollTop, clientHeight)) {\n        //\n        //      this.setState({ isVisible: true });\n        //       // this.elements.splice(index, 1);\n        //     }\n        //   }\n\n        // }\n        if (popupTrigger !== prevProps.popupTrigger) {\n          this.setState({\n            isVisible:\n              popupTrigger.popupID === _.get(this.props, \"template.guid\")\n          });\n        }\n        break;\n      case \"offcanvas\":\n        // if (on_scroll && !isShownOnScroll && on_scroll.size <= this.props.scrollPosition.top * 100) {\n        //   this.setState({ isVisible: true, isShownOnScroll: true });\n        // }\n        //\n        // if (this.resetTimer && this.props.scrollPosition.top !== prevProps.scrollPosition.top) {\n        //   this.resetTimer();\n        // }\n\n        // if (to_element && this.props.scrollPosition.top !== prevProps.scrollPosition.top) {\n        //   // console.log(this.elements)\n        //   console.log(this.props.scrollPosition.scrollTop)\n        //   const { scrollTop, clientHeight } = this.props.scrollPosition;\n\n        //   for (let index = 0; index < this.elements.length; index++) {\n        //     const element = this.elements[index];\n\n        //     if (isElementTopInViewport(element, scrollTop, clientHeight)) {\n        //       this.setState({ isVisible: true });\n        //       // this.elements.splice(index, 1);\n        //     }\n        //   }\n\n        // }\n        if (popupTrigger !== prevProps.popupTrigger) {\n          this.setState({\n            isVisible:\n              popupTrigger.popupID === _.get(this.props, \"template.guid\")\n          });\n        }\n        break;\n    }\n  }\n\n  close() {\n    this.setState({ isVisible: false, isShownOnScroll: false });\n    this.props.closePopup();\n  }\n\n  render() {\n    const { isVisible } = this.state;\n    let classes = [`app-popup`];\n    // const { positioning_custom_top } = this.props.template.data.rootElementSettings;\n    const rootElement = this.state.rootElement;\n    rootElement.popupGUID = _.get(this.props, \"template.guid\");\n    const rootElementSettings = rootElement.getSettings(\"\");\n    let  popup_close_icon =  rootElement.getResponsiveSetting('popup_close_icon')\n    let  popup_close_icon_width_size =  rootElement.getResponsiveSetting('popup_close_icon_width_size')\n    let  popup_close_icon_height_size =  rootElement.getResponsiveSetting('popup_close_icon_height_size')\n    if(! popup_close_icon_height_size){\n      popup_close_icon_height_size = '50px'\n    } else {\n      popup_close_icon_height_size = `${popup_close_icon_height_size.size || '0'}${popup_close_icon_height_size.unit}`\n    }\n\n    if(! popup_close_icon_width_size){\n      popup_close_icon_width_size = '50px'\n    } else {\n      popup_close_icon_width_size = `${popup_close_icon_width_size.size || '0'}${popup_close_icon_width_size.unit}`\n    }\n\n    const rootElementId = rootElement.getId();\n    const close_context = rootElement.getResponsiveSetting( 'close_context')\n\n    classes.push(`${rootElementId}-app-popup`);\n    const overlayCondition =\n      rootElement.getResponsiveSetting('overlay_close_popup_layout');\n\n    if (overlayCondition) {\n      classes.push(\"app-popup-overlay\");\n    }\n\n    //height popup\n    switch (rootElementSettings.height_popup_layout) {\n      case \"fitToScreen\":\n        classes.push(\"app-popup-height-fit-to-screen\");\n        break;\n      case \"custom\":\n        classes.push(\"app-popup-height-custom\");\n        break;\n    }\n\n    //horizontal position horizontal_position_popup_layout\n    switch (rootElementSettings.horizontal_position_popup_layout) {\n      case \"left\":\n        classes.push(\"app-popup-horizontal-left\");\n        break;\n      case \"center\":\n        classes.push(\"app-popup-horizontal-center\");\n        break;\n      case \"right\":\n        classes.push(\"app-popup-horizontal-right\");\n        break;\n      default:\n        classes.push(\"app-popup-horizontal-center\");\n    }\n\n    //vertical position vertical_position_popup_layout\n    switch (rootElementSettings.vertical_position_popup_layout) {\n      case \"top\":\n        classes.push(\"app-popup-vertical-top\");\n        break;\n      case \"center\":\n        classes.push(\"app-popup-vertical-center\");\n        break;\n      case \"bottom\":\n        classes.push(\"app-popup-vertical-bottom\");\n        break;\n      default:\n        classes.push(\"app-popup-vertical-center\");\n    }\n\n    let content = \"\";\n    const closeButtonCondition =\n      rootElement.getResponsiveSetting('switcher_close_button_popup_layout');\n    let { popup_close_icon_alignment } = rootElementSettings;\n    popup_close_icon_alignment = popup_close_icon_alignment || \"right\";\n    const closeButton = closeButtonCondition ? (\n      <button\n        className={\n          \"popup-close-button\" +\n          (popup_close_icon_alignment === \"right\"\n            ? \" popup-close-button-right\"\n            : \" popup-close-button-left\")\n        }\n        onClick={() => {\n          this.setState({ isVisible: false });\n          this.props.closePopup();\n        }}\n      >\n        <AltrpImage\n          image={popup_close_icon}\n          lazy={false}\n          width={popup_close_icon_width_size}\n          height={popup_close_icon_height_size}\n          default={{\n            assetType: \"icon\",\n            name: \"deleteOne\",\n            url: \"/img/nullImage.png\"\n          }}\n          className=\"popup-close-button-icon\"\n        />\n      </button>\n    ) : (\n      <button\n        className={\n          \"popup-close-button\" +\n          (popup_close_icon_alignment === \"right\"\n            ? \" popup-close-button-right\"\n            : \" popup-close-button-left\")\n        }\n        onClick={() => {\n          this.setState({ isVisible: false });\n          this.props.closePopup();\n        }}\n      >\n        {iconsManager().renderIcon('times' ,{\n          width:popup_close_icon_width_size,\n          height:popup_close_icon_height_size,\n          className: \"popup-close-button-icon\"\n        })}\n      </button>\n    );\n\n\n    const popup = isVisible ? (\n      <FrontPopupWrapper\n        settings={rootElementSettings}\n        className={classes.join(\" \")}\n        onClick={() => {\n          if (\n            overlayCondition\n          ) {\n            this.setState({ isVisible: false });\n            this.props.closePopup();\n          }\n        }}\n      >\n        {close_context === 'window' && closeButton}\n        <div\n          className=\"popup-window\"\n          // style={{ top: positioning_custom_top.size + positioning_custom_top.unit}}\n          onClick={e => e.stopPropagation()}\n        >\n          {close_context !== 'window' && closeButton}\n\n          <Scrollbars\n            autoHide\n            renderThumbHorizontal={props => (\n              <div {...props} className=\"popup-scrollbar-vertical\" />\n            )}\n            renderTrackHorizontal={() => (\n              <div className=\"popup-scrollbar-track-horizontal\" />\n            )}\n            renderTrackVertical={props => (\n              <div {...props} className=\"popup-scrollbar-track-vertical\" />\n            )}\n            className=\"popup-scrollbar\"\n            autoHideTimeout={1000}\n            autoHideDuration={200}\n          >\n            <div className=\"popup-content\">\n              {React.createElement(rootElement.componentClass, {\n                element: rootElement,\n                ElementWrapper :this.ElementWrapper,\n                children: rootElement.children\n              })}\n            </div>\n          </Scrollbars>\n        </div>\n      </FrontPopupWrapper>\n    ) : null;\n    const type = rootElement.getResponsiveSetting('type_popup') || \"popup\";\n    switch (type) {\n      case \"popup\":\n        content = popup;\n        break;\n      case \"offcanvas\":\n        content = (\n          <AltrpOffcanvas\n            close={this.close}\n            show={this.state.isVisible}\n            settings={rootElementSettings}\n            template={rootElement}\n          />\n        );\n        break;\n    }\n    return content;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    scrollPosition: state.scrollPosition,\n    popupTrigger: state.popupTrigger\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    closePopup: () => dispatch(togglePopup(null))\n  };\n};\n\nexport default window.reactRedux.connect(mapStateToProps, mapDispatchToProps)(FrontPopup);\n"],"sourceRoot":""}